{
  "id": "alessandrolobello/gasoline-hourly-price-tracker-from-2022",
  "id_no": 3544581,
  "datasetSlugNullable": "gasoline-hourly-price-tracker-from-2022",
  "ownerUserNullable": "alessandrolobello",
  "usabilityRatingNullable": 1.0,
  "titleNullable": "Gasoline Hourly Price Tracker Dataset ",
  "subtitleNullable": "Exploring Italy's Fuel Price Trends with a Huge Dataset with milions of row -ML ",
  "descriptionNullable": "**Description:**\n\nThe *The Gasoline Hourly Price Tracker*  is a valuable dataset offering insights into hourly fluctuations in gasoline prices throughout the year 2022, specifically focused on Italy. This dataset is available in two formats: CSV and Parquet. The Parquet format, in particular, is exceptionally well-suited for managing large datasets, and I will provide a concise overview of its advantages, along with a simple guide on how to effortlessly open it using Pandas at the end of this description.\n\n**Dataset 1: Hourly Gasoline Prices**(2.5 million rows):\n<br>This dataset contains hourly updated gasoline prices throughout the year 2022. With over 2.5 million rows of data, it provides detailed insights into price variations across different hours and dates, facilitating in-depth analysis and modeling.\n\n**Features:**\n- **Id**: the merging key\n- **isSelf**: A binary flag indicating whether the data pertains to self-service fuel stations (1) or not (0). \n- **Price**: The recorded price of gasoline in euros (\u20ac) at the specified date and time\n- **Date**: The timestamp representing the date and time of each recorded gasoline price.\n\n**Dataset 2: Fuel Station Information** (Approx. 20,000 rows)\n<br>The second dataset providing essential metadata about fuel stations, including geographical information like latitude, longitude, and other relevant details. This dataset complements the hourly price data, enabling geospatial analysis and geografica correlation with price fluctuations across all italian cities.\n\n**Features:**\n- **Id:** the merging key\n- **Fuel_station_manager:** The name or identity of the manager or operator responsible for the fuel station. T\n- **Petrol_company:** The name of the petrol company associated with the fuel station. \n- **Type:** The type or category of the fuel station (Stradale:\"on urban street\", Autostradale: \"on higway\")\n- **Station_name:** The name or label of the fuel station.\n- **City:** The Italian city where the fuel station is located\n- **Latitude:** The latitude coordinate of the fuel station's location\n- **Longitude:** The longitude coordinate of the fuel station's location\n\n**Forecasting on Stationary Time Series:**\n<br>The Gasoline Hourly Price Tracker Dataset is an excellent resource for conducting forecasting analyses. Given the hourly resolution and the time span of the data, it forms a stationary time series \u2013 a crucial characteristic for time series modeling. Analysts and data scientists can apply advanced forecasting techniques to predict future gasoline price trends, which can be valuable for various industries and economic insights.\n\n**Note for beginners: What is Parquet and its Benefits?**\n<br>Parquet is a file format that offers efficient columnar storage, making it ideal for handling large datasets. Its benefits include:\n- Compression Efficiency: Parquet uses advanced compression techniques, reducing file size and optimizing storage requirements. This enables faster data transfer and efficient disk utilization.\n- Columnar Storage: Unlike row-based storage formats, Parquet stores data in columns, allowing for better query performance. When you access specific columns, Parquet only reads the required data, reducing I/O overhead and accelerating data processing.\n- Compatibility: Parquet files are compatible with various big data processing tools and platforms, such as Apache Spark, Apache Hive, and Apache Impala. This enables seamless integration into existing data pipelines and analytics workflows.\n\n**Opening Parquet with Pandas (steps):**\n- on terminal: pip install pyarrow\n- df = pd.read_parquet('file_path.parquet')",
  "datasetId": 3544581,
  "datasetSlug": "gasoline-hourly-price-tracker-from-2022",
  "hasDatasetSlug": true,
  "ownerUser": "alessandrolobello",
  "hasOwnerUser": true,
  "usabilityRating": 1.0,
  "hasUsabilityRating": true,
  "totalViews": 1752,
  "totalVotes": 7,
  "totalDownloads": 241,
  "title": "Gasoline Hourly Price Tracker Dataset ",
  "hasTitle": true,
  "subtitle": "Exploring Italy's Fuel Price Trends with a Huge Dataset with milions of row -ML ",
  "hasSubtitle": true,
  "description": "**Description:**\n\nThe *The Gasoline Hourly Price Tracker*  is a valuable dataset offering insights into hourly fluctuations in gasoline prices throughout the year 2022, specifically focused on Italy. This dataset is available in two formats: CSV and Parquet. The Parquet format, in particular, is exceptionally well-suited for managing large datasets, and I will provide a concise overview of its advantages, along with a simple guide on how to effortlessly open it using Pandas at the end of this description.\n\n**Dataset 1: Hourly Gasoline Prices**(2.5 million rows):\n<br>This dataset contains hourly updated gasoline prices throughout the year 2022. With over 2.5 million rows of data, it provides detailed insights into price variations across different hours and dates, facilitating in-depth analysis and modeling.\n\n**Features:**\n- **Id**: the merging key\n- **isSelf**: A binary flag indicating whether the data pertains to self-service fuel stations (1) or not (0). \n- **Price**: The recorded price of gasoline in euros (\u20ac) at the specified date and time\n- **Date**: The timestamp representing the date and time of each recorded gasoline price.\n\n**Dataset 2: Fuel Station Information** (Approx. 20,000 rows)\n<br>The second dataset providing essential metadata about fuel stations, including geographical information like latitude, longitude, and other relevant details. This dataset complements the hourly price data, enabling geospatial analysis and geografica correlation with price fluctuations across all italian cities.\n\n**Features:**\n- **Id:** the merging key\n- **Fuel_station_manager:** The name or identity of the manager or operator responsible for the fuel station. T\n- **Petrol_company:** The name of the petrol company associated with the fuel station. \n- **Type:** The type or category of the fuel station (Stradale:\"on urban street\", Autostradale: \"on higway\")\n- **Station_name:** The name or label of the fuel station.\n- **City:** The Italian city where the fuel station is located\n- **Latitude:** The latitude coordinate of the fuel station's location\n- **Longitude:** The longitude coordinate of the fuel station's location\n\n**Forecasting on Stationary Time Series:**\n<br>The Gasoline Hourly Price Tracker Dataset is an excellent resource for conducting forecasting analyses. Given the hourly resolution and the time span of the data, it forms a stationary time series \u2013 a crucial characteristic for time series modeling. Analysts and data scientists can apply advanced forecasting techniques to predict future gasoline price trends, which can be valuable for various industries and economic insights.\n\n**Note for beginners: What is Parquet and its Benefits?**\n<br>Parquet is a file format that offers efficient columnar storage, making it ideal for handling large datasets. Its benefits include:\n- Compression Efficiency: Parquet uses advanced compression techniques, reducing file size and optimizing storage requirements. This enables faster data transfer and efficient disk utilization.\n- Columnar Storage: Unlike row-based storage formats, Parquet stores data in columns, allowing for better query performance. When you access specific columns, Parquet only reads the required data, reducing I/O overhead and accelerating data processing.\n- Compatibility: Parquet files are compatible with various big data processing tools and platforms, such as Apache Spark, Apache Hive, and Apache Impala. This enables seamless integration into existing data pipelines and analytics workflows.\n\n**Opening Parquet with Pandas (steps):**\n- on terminal: pip install pyarrow\n- df = pd.read_parquet('file_path.parquet')",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "intermediate",
    "time series analysis",
    "deep learning",
    "regression",
    "oil and gas"
  ],
  "licenses": [
    {
      "nameNullable": "CC0-1.0",
      "name": "CC0-1.0",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}