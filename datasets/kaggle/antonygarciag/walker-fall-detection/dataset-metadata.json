{
  "id": "antonygarciag/walker-fall-detection",
  "id_no": 3753185,
  "datasetSlugNullable": "walker-fall-detection",
  "ownerUserNullable": "antonygarciag",
  "usabilityRatingNullable": 1.0,
  "titleNullable": "Walker Fall Detection Dataset",
  "subtitleNullable": "A compilation of inertial data designed for the study of fall detection ",
  "descriptionNullable": "**Overview**\n\nThe Walker Fall Detection Data Set is a curated compilation of inertial data designed for the study of fall detection systems, specifically for people using walking assistance. This data set offers deep insight into various movement patterns. It covers data from four different classes: **idle**, **motion**, **step** and **fall**.\n\nThis dataset was published as part of a research paper: **[Dataset and System Design for Orthopedic Walker Fall Detection and Activity Logging Using Motion Classification](https://doi.org/10.3390/app132011379)**\n\n\n---\n\n**Data Acquisition**\n\nData was recorded using an IMU affixed to a walker, as illustrated in the image below:\n\n![Walker](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F15943143%2F134aaf57e284d20775d37ecdfa14d30e%2F20230712_163957.jpg?generation=1695049359163422&alt=media)\n\nThe IMU used for this project is the Arduino Nano 33 BLE Sense. It's powered by a LiPo battery and is equipped with a voltage regulator and a dedicated battery charging circuit. To ensure durability and protection during the data recording phase, the entire prototype was securely housed in a custom 3D-printed casing.\n\n![](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F15943143%2F0c8458d7bd161e983e1676e72d89085d%2F20230712_163957_2.jpg?generation=1695050869941377&alt=media)\n\nThe prototype was designed to transmit data wirelessly to a computer using Bluetooth Low Energy (BLE). Upon receipt, a Python script processed the incoming data and stored it in JSON format. The data transmission rate was optimized to achieve the highest possible rate, resulting in approximately 100 samples per second, covering both accelerometer and gyroscope data.\n\nData were collected from four different subjects, each of whom maneuvered the walker down a hallway, primarily capturing step and movement data. It is important to note that the \u201c**idle**\u201d data are not subject-specific, as it represents periods in which the walker is stationary. Similarly, \u201c**fall**\u201d data is also not linked to any particular individual; was obtained by deliberately pushing the walker from a vertical position to the ground.\n\n**Data Processing**\n\nThis dataset contains four classes:\n\n- **Idle**: Represents periods of no movement, indicating that the walker is stationary.\n- **Step**: Capture moments when an individual takes a step using the walker.\n- **Movement**: Covers any movement that is not considered a step or a fall, such as when carrying the walker or adjusting its position.\n- **Fall**: Denotes cases in which the walker tips over and falls to the ground from an upright position.\n\nTo effectively categorize the data, several processing steps were executed. Initially, the data was reduced from its original 100 samples per second to ensure a constant time step between samples, since the original rate was not uniformly constant. After this, both the acceleration and gyro data were normalized to one sample every 12.5 milliseconds, resulting in a rate of 80 samples per second. This normalization allowed the synchronization of acceleration and gyroscope data, which were subsequently stored in dictionaries in JSON format. Each dictionary contains the six dimensions (three acceleration and three gyro) corresponding to a specific timestamp.\n\nTo distinguish individual samples within each group, the root mean square (RMS) value of the six dimensions (comprising acceleration and gyroscope data) was calculated. Subsequently, an algorithm based on the hidden Markov model (HMM) was used to discern the hidden states inherent in the data, which facilitated the segmentation of the data set.\n\n![](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F15943143%2F250182bc7b0c3ca0383ea79ac6e3224a%2Fhmm.jpg?generation=1695059033833835&alt=media)\n\nThrough the filtering process, the HMM effectively identifies individual steps. Once all steps were identified, the window size was determined based on the duration of each step. A window size of 160 samples was chosen, which, given a rate of 80 samples per second, is equivalent to a duration of 2 seconds for each sample.\n\nA similar procedure is employed to extract \"fall\" samples. However, for \"idle\" and \"motion\" samples, isolation isn't necessary. Instead, samples from these categories can be arbitrarily chosen from the recorded clusters.\n\n**Final Dataset**\nThe finalized dataset is presented in CSV format. The first column serves as the label column and covers all four classes. In addition to this, the CSV file has 960 columns of functions. These columns encapsulate 160 samples each of acceleration and gyro data in the x, y, and z axes.\n\nEach class contains 620 samples, bringing the overall total to 2480 samples across all classes.\n\n**Citation and Use**\n\nThis dataset is associated with a research article currently undergoing peer review. If you're leveraging this dataset for academic, research, or any scientific purposes, please ensure proper citation to give credit to the original authors:\n\n**Garcia, A.; Huang, M. Dataset and System Design for Orthopedic Walker Fall Detection and Activity Logging Using Motion Classification. Preprints 2023, 2023091675. [Link](https://doi.org/10.3390/app132011379).**\n\nAny utilization without proper attribution is discouraged as it may infringe upon the intellectual contributions of the authors.",
  "datasetId": 3753185,
  "datasetSlug": "walker-fall-detection",
  "hasDatasetSlug": true,
  "ownerUser": "antonygarciag",
  "hasOwnerUser": true,
  "usabilityRating": 1.0,
  "hasUsabilityRating": true,
  "totalViews": 1953,
  "totalVotes": 10,
  "totalDownloads": 217,
  "title": "Walker Fall Detection Dataset",
  "hasTitle": true,
  "subtitle": "A compilation of inertial data designed for the study of fall detection ",
  "hasSubtitle": true,
  "description": "**Overview**\n\nThe Walker Fall Detection Data Set is a curated compilation of inertial data designed for the study of fall detection systems, specifically for people using walking assistance. This data set offers deep insight into various movement patterns. It covers data from four different classes: **idle**, **motion**, **step** and **fall**.\n\nThis dataset was published as part of a research paper: **[Dataset and System Design for Orthopedic Walker Fall Detection and Activity Logging Using Motion Classification](https://doi.org/10.3390/app132011379)**\n\n\n---\n\n**Data Acquisition**\n\nData was recorded using an IMU affixed to a walker, as illustrated in the image below:\n\n![Walker](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F15943143%2F134aaf57e284d20775d37ecdfa14d30e%2F20230712_163957.jpg?generation=1695049359163422&alt=media)\n\nThe IMU used for this project is the Arduino Nano 33 BLE Sense. It's powered by a LiPo battery and is equipped with a voltage regulator and a dedicated battery charging circuit. To ensure durability and protection during the data recording phase, the entire prototype was securely housed in a custom 3D-printed casing.\n\n![](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F15943143%2F0c8458d7bd161e983e1676e72d89085d%2F20230712_163957_2.jpg?generation=1695050869941377&alt=media)\n\nThe prototype was designed to transmit data wirelessly to a computer using Bluetooth Low Energy (BLE). Upon receipt, a Python script processed the incoming data and stored it in JSON format. The data transmission rate was optimized to achieve the highest possible rate, resulting in approximately 100 samples per second, covering both accelerometer and gyroscope data.\n\nData were collected from four different subjects, each of whom maneuvered the walker down a hallway, primarily capturing step and movement data. It is important to note that the \u201c**idle**\u201d data are not subject-specific, as it represents periods in which the walker is stationary. Similarly, \u201c**fall**\u201d data is also not linked to any particular individual; was obtained by deliberately pushing the walker from a vertical position to the ground.\n\n**Data Processing**\n\nThis dataset contains four classes:\n\n- **Idle**: Represents periods of no movement, indicating that the walker is stationary.\n- **Step**: Capture moments when an individual takes a step using the walker.\n- **Movement**: Covers any movement that is not considered a step or a fall, such as when carrying the walker or adjusting its position.\n- **Fall**: Denotes cases in which the walker tips over and falls to the ground from an upright position.\n\nTo effectively categorize the data, several processing steps were executed. Initially, the data was reduced from its original 100 samples per second to ensure a constant time step between samples, since the original rate was not uniformly constant. After this, both the acceleration and gyro data were normalized to one sample every 12.5 milliseconds, resulting in a rate of 80 samples per second. This normalization allowed the synchronization of acceleration and gyroscope data, which were subsequently stored in dictionaries in JSON format. Each dictionary contains the six dimensions (three acceleration and three gyro) corresponding to a specific timestamp.\n\nTo distinguish individual samples within each group, the root mean square (RMS) value of the six dimensions (comprising acceleration and gyroscope data) was calculated. Subsequently, an algorithm based on the hidden Markov model (HMM) was used to discern the hidden states inherent in the data, which facilitated the segmentation of the data set.\n\n![](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F15943143%2F250182bc7b0c3ca0383ea79ac6e3224a%2Fhmm.jpg?generation=1695059033833835&alt=media)\n\nThrough the filtering process, the HMM effectively identifies individual steps. Once all steps were identified, the window size was determined based on the duration of each step. A window size of 160 samples was chosen, which, given a rate of 80 samples per second, is equivalent to a duration of 2 seconds for each sample.\n\nA similar procedure is employed to extract \"fall\" samples. However, for \"idle\" and \"motion\" samples, isolation isn't necessary. Instead, samples from these categories can be arbitrarily chosen from the recorded clusters.\n\n**Final Dataset**\nThe finalized dataset is presented in CSV format. The first column serves as the label column and covers all four classes. In addition to this, the CSV file has 960 columns of functions. These columns encapsulate 160 samples each of acceleration and gyro data in the x, y, and z axes.\n\nEach class contains 620 samples, bringing the overall total to 2480 samples across all classes.\n\n**Citation and Use**\n\nThis dataset is associated with a research article currently undergoing peer review. If you're leveraging this dataset for academic, research, or any scientific purposes, please ensure proper citation to give credit to the original authors:\n\n**Garcia, A.; Huang, M. Dataset and System Design for Orthopedic Walker Fall Detection and Activity Logging Using Motion Classification. Preprints 2023, 2023091675. [Link](https://doi.org/10.3390/app132011379).**\n\nAny utilization without proper attribution is discouraged as it may infringe upon the intellectual contributions of the authors.",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "sampling",
    "electronics",
    "intermediate",
    "signal processing",
    "random forest"
  ],
  "licenses": [
    {
      "nameNullable": "CC0-1.0",
      "name": "CC0-1.0",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}