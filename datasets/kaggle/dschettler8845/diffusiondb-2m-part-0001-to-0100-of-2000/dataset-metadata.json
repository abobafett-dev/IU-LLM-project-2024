{
  "id": "dschettler8845/diffusiondb-2m-part-0001-to-0100-of-2000",
  "id_no": 2904563,
  "datasetSlugNullable": "diffusiondb-2m-part-0001-to-0100-of-2000",
  "ownerUserNullable": "dschettler8845",
  "usabilityRatingNullable": 1.0,
  "titleNullable": "DiffusionDB-2M \u2013\u2013 Part 0001 to 0100 of 2000",
  "subtitleNullable": "2 Million Image-Prompt Pairs -- Part 1 of 20",
  "descriptionNullable": "<br>\n\n<h2><b>IMPORTANT NOTE</b></h2>\n\nThis Kaggle dataset represents 1 of 20 parts that make up the DiffusionDB 2Million Image-Prompt Subset Dataset. The description and information below comes directly from the DiffusionDB website and is not specific to this Kaggle dataset. I am not the author of this work, I am just the person who downloaded, unzipped, rezipped, and uploaded it to Kaggle. Please pass all your kudos and whatnot on to the original authors at the following website:\n* <a href=\"https://poloclub.github.io/diffusiondb/\">https://poloclub.github.io/diffusiondb/</a>\n\n<br>\n\n<b>Links to the other parts of this dataset available on Kaggle can be found below:\n<ol>\n<li><b><a href=\"https://www.kaggle.com/datasets/dschettler8845/diffusiondb-2m-part-0001-to-0100-of-2000\">DiffusionDB-2M \u2013\u2013 Part 0001 to 0100 of 2000</a></b></li>\n<li><b><a href=\"https://www.kaggle.com/datasets/dschettler8845/diffusiondb-2m-part-0101-to-0200-of-2000\">DiffusionDB-2M \u2013\u2013 Part 0101 to 0200 of 2000</a></b></li>\n<li><b><a href=\"https://www.kaggle.com/datasets/dschettler8845/diffusiondb-2m-part-0201-to-0300-of-2000\">DiffusionDB-2M \u2013\u2013 Part 0201 to 0300 of 2000</a></b></li>\n<li>TBD</li>\n</ol>\n<br>\n\n---\n\n<br>\n\n[DiffusionDB](/diffusiondb/)[](#)\n\n*   [Home](/diffusiondb/)\n*   [Datasheet](/diffusiondb/datasheet.html)\n\n*   [DiffusionDB on GitHub](https://github.com/poloclub/diffusiondb)\n*   [Download DiffusionDB on Hugging Face](https://huggingface.co/datasets/poloclub/diffusiondb)\n\nThis site uses [Just the Docs](https://github.com/just-the-docs/just-the-docs), a documentation theme for Jekyll.\n\n[](#diffusiondb)DiffusionDB\n===========================\n\n![](https://user-images.githubusercontent.com/15007159/201762588-f24db2b8-dbb2-4a94-947b-7de393fc3d33.gif)\n\n[](#table-of-contents)Table of Contents\n---------------------------------------\n\n*   [DiffusionDB](#diffusiondb)\n    *   [Table of Contents](#table-of-contents)\n    *   [Dataset Description](#dataset-description)\n        *   [Dataset Summary](#dataset-summary)\n        *   [Supported Tasks and Leaderboards](#supported-tasks-and-leaderboards)\n        *   [Languages](#languages)\n        *   [Two Subsets](#two-subsets)\n            *   [Key Differences](#key-differences)\n    *   [Dataset Structure](#dataset-structure)\n        *   [Data Instances](#data-instances)\n        *   [Data Fields](#data-fields)\n        *   [Dataset Metadata](#dataset-metadata)\n            *   [Metadata Schema](#metadata-schema)\n        *   [Data Splits](#data-splits)\n        *   [Loading Data Subsets](#loading-data-subsets)\n            *   [Method 1: Using Hugging Face Datasets Loader](#method-1-using-hugging-face-datasets-loader)\n            *   [Method 2. Use the PoloClub Downloader](#method-2-use-the-poloclub-downloader)\n                *   [Usage/Examples](#usageexamples)\n                    *   [Downloading a single file](#downloading-a-single-file)\n                    *   [Downloading a range of files](#downloading-a-range-of-files)\n                    *   [Downloading to a specific directory](#downloading-to-a-specific-directory)\n                    *   [Setting the files to unzip once they\u2019ve been downloaded](#setting-the-files-to-unzip-once-theyve-been-downloaded)\n            *   [Method 3. Use `metadata.parquet` (Text Only)](#method-3-use-metadataparquet-text-only)\n    *   [Dataset Creation](#dataset-creation)\n        *   [Curation Rationale](#curation-rationale)\n        *   [Source Data](#source-data)\n            *   [Initial Data Collection and Normalization](#initial-data-collection-and-normalization)\n            *   [Who are the source language producers?](#who-are-the-source-language-producers)\n        *   [Annotations](#annotations)\n            *   [Annotation process](#annotation-process)\n            *   [Who are the annotators?](#who-are-the-annotators)\n        *   [Personal and Sensitive Information](#personal-and-sensitive-information)\n    *   [Considerations for Using the Data](#considerations-for-using-the-data)\n        *   [Social Impact of Dataset](#social-impact-of-dataset)\n        *   [Discussion of Biases](#discussion-of-biases)\n        *   [Other Known Limitations](#other-known-limitations)\n    *   [Additional Information](#additional-information)\n        *   [Dataset Curators](#dataset-curators)\n        *   [Licensing Information](#licensing-information)\n        *   [Citation Information](#citation-information)\n        *   [Contributions](#contributions)\n\n[](#dataset-description)Dataset Description\n-------------------------------------------\n\n*   **Homepage:** [DiffusionDB homepage](https://poloclub.github.io/diffusiondb)\n*   **Repository:** [DiffusionDB repository](https://github.com/poloclub/diffusiondb)\n*   **Distribution:** [DiffusionDB Hugging Face Dataset](https://huggingface.co/datasets/poloclub/diffusiondb)\n*   **Paper:** [DiffusionDB: A Large-scale Prompt Gallery Dataset for Text-to-Image Generative Models](https://arxiv.org/abs/2210.14896)\n*   **Point of Contact:** [Jay Wang](mailto:jayw@gatech.edu)\n\n### [](#dataset-summary)Dataset Summary\n\nDiffusionDB is the first large-scale text-to-image prompt dataset. It contains **14 million** images generated by Stable Diffusion using prompts and hyperparameters specified by real users.\n\nDiffusionDB is publicly available at [\ud83e\udd17 Hugging Face Dataset](https://huggingface.co/datasets/poloclub/diffusiondb).\n\n### [](#supported-tasks-and-leaderboards)Supported Tasks and Leaderboards\n\nThe unprecedented scale and diversity of this human-actuated dataset provide exciting research opportunities in understanding the interplay between prompts and generative models, detecting deepfakes, and designing human-AI interaction tools to help users more easily use these models.\n\n### [](#languages)Languages\n\nThe text in the dataset is mostly English. It also contains other languages such as Spanish, Chinese, and Russian.\n\n### [](#two-subsets)Two Subsets\n\nDiffusionDB provides two subsets (DiffusionDB 2M and DiffusionDB Large) to support different needs.\n\n<table> <thead> <tr> <th>Subset</th> <th>Num of Images</th> <th>Num of Unique Prompts</th> <th>Size</th> <th>Image Directory</th> <th>Metadata Table</th> </tr> </thead> <tbody> <tr> <td>DiffusionDB 2M</td> <td>2M</td> <td>1.5M</td> <td>1.6TB</td> <td><code>images/</code></td> <td><code>metadata.parquet</code></td> </tr> <tr> <td>DiffusionDB Large</td> <td>14M</td> <td>1.8M</td> <td>6.5TB</td> <td><code>diffusiondb-large-part-1/</code> <code>diffusiondb-large-part-2/</code></td> <td><code>metadata-large.parquet</code></td> </tr> </tbody> </table>\n##### [](#key-differences)Key Differences\n\n1.  Two subsets have a similar number of unique prompts, but DiffusionDB Large has much more images. DiffusionDB Large is a superset of DiffusionDB 2M.\n2.  Images in DiffusionDB 2M are stored in `png` format; images in DiffusionDB Large use a lossless `webp` format.\n\n[](#dataset-structure)Dataset Structure\n---------------------------------------\n\nWe use a modularized file structure to distribute DiffusionDB. The 2 million images in DiffusionDB 2M are split into 2,000 folders, where each folder contains 1,000 images and a JSON file that links these 1,000 images to their prompts and hyperparameters. Similarly, the 14 million images in DiffusionDB Large are split into 14,000 folders.\n\n    # DiffusionDB 2M\n    ./\n    \u251c\u2500\u2500 images\n    \u2502   \u251c\u2500\u2500 part-000001\n    \u2502   \u2502   \u251c\u2500\u2500 3bfcd9cf-26ea-4303-bbe1-b095853f5360.png\n    \u2502   \u2502   \u251c\u2500\u2500 5f47c66c-51d4-4f2c-a872-a68518f44adb.png\n    \u2502   \u2502   \u251c\u2500\u2500 66b428b9-55dc-4907-b116-55aaa887de30.png\n    \u2502   \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2502   \u2514\u2500\u2500 part-000001.json\n    \u2502   \u251c\u2500\u2500 part-000002\n    \u2502   \u251c\u2500\u2500 part-000003\n    \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2514\u2500\u2500 part-002000\n    \u2514\u2500\u2500 metadata.parquet\n    \n\n    # DiffusionDB Large\n    ./\n    \u251c\u2500\u2500 diffusiondb-large-part-1\n    \u2502   \u251c\u2500\u2500 part-000001\n    \u2502   \u2502   \u251c\u2500\u2500 0a8dc864-1616-4961-ac18-3fcdf76d3b08.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0a25cacb-5d91-4f27-b18a-bd423762f811.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0a52d584-4211-43a0-99ef-f5640ee2fc8c.webp\n    \u2502   \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2502   \u2514\u2500\u2500 part-000001.json\n    \u2502   \u251c\u2500\u2500 part-000002\n    \u2502   \u251c\u2500\u2500 part-000003\n    \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2514\u2500\u2500 part-010000\n    \u251c\u2500\u2500 diffusiondb-large-part-2\n    \u2502   \u251c\u2500\u2500 part-010001\n    \u2502   \u2502   \u251c\u2500\u2500 0a68f671-3776-424c-91b6-c09a0dd6fc2d.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0a0756e9-1249-4fe2-a21a-12c43656c7a3.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0aa48f3d-f2d9-40a8-a800-c2c651ebba06.webp\n    \u2502   \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2502   \u2514\u2500\u2500 part-000001.json\n    \u2502   \u251c\u2500\u2500 part-010002\n    \u2502   \u251c\u2500\u2500 part-010003\n    \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2514\u2500\u2500 part-014000\n    \u2514\u2500\u2500 metadata-large.parquet\n    \n\nThese sub-folders have names `part-0xxxxx`, and each image has a unique name generated by [UUID Version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier). The JSON file in a sub-folder has the same name as the sub-folder. Each image is a `PNG` file (DiffusionDB 2M) or a lossless `WebP` file (DiffusionDB Large). The JSON file contains key-value pairs mapping image filenames to their prompts and hyperparameters.\n\n### [](#data-instances)Data Instances\n\nFor example, below is the image of `f3501e05-aef7-4225-a9e9-f516527408ac.png` and its key-value pair in `part-000001.json`.\n\n![](https://i.imgur.com/gqWcRs2.png)\n\n    {\n      \"f3501e05-aef7-4225-a9e9-f516527408ac.png\": {\n        \"p\": \"geodesic landscape, john chamberlain, christopher balaskas, tadao ando, 4 k, \",\n        \"se\": 38753269,\n        \"c\": 12.0,\n        \"st\": 50,\n        \"sa\": \"k_lms\"\n      },\n    }\n    \n\n### [](#data-fields)Data Fields\n\n*   key: Unique image name\n*   `p`: Prompt\n*   `se`: Random seed\n*   `c`: CFG Scale (guidance scale)\n*   `st`: Steps\n*   `sa`: Sampler\n\n### [](#dataset-metadata)Dataset Metadata\n\nTo help you easily access prompts and other attributes of images without downloading all the Zip files, we include two metadata tables `metadata.parquet` and `metadata-large.parquet` for DiffusionDB 2M and DiffusionDB Large, respectively.\n\nThe shape of `metadata.parquet` is (2000000, 13) and the shape of `metatable-large.parquet` is (14000000, 13). Two tables share the same schema, and each row represents an image. We store these tables in the Parquet format because Parquet is column-based: you can efficiently query individual columns (e.g., prompts) without reading the entire table.\n\nBelow are three random rows from `metadata.parquet`.\n\n<table> <thead> <tr> <th>image_name</th> <th>prompt</th> <th>part_id</th> <th>seed</th> <th>step</th> <th>cfg</th> <th>sampler</th> <th>width</th> <th>height</th> <th>user_name</th> <th>timestamp</th> <th>image_nsfw</th> <th>prompt_nsfw</th> </tr> </thead> <tbody> <tr> <td>0c46f719-1679-4c64-9ba9-f181e0eae811.png</td> <td>a small liquid sculpture, corvette, viscous, reflective, digital art</td> <td>1050</td> <td>2026845913</td> <td>50</td> <td>7</td> <td>8</td> <td>512</td> <td>512</td> <td>c2f288a2ba9df65c38386ffaaf7749106fed29311835b63d578405db9dbcafdb</td> <td>2022-08-11 09:05:00+00:00</td> <td>0.0845108</td> <td>0.00383462</td> </tr> <tr> <td>a00bdeaa-14eb-4f6c-a303-97732177eae9.png</td> <td>human sculpture of lanky tall alien on a romantic date at italian restaurant with smiling woman, nice restaurant, photography, bokeh</td> <td>905</td> <td>1183522603</td> <td>50</td> <td>10</td> <td>8</td> <td>512</td> <td>768</td> <td>df778e253e6d32168eb22279a9776b3cde107cc82da05517dd6d114724918651</td> <td>2022-08-19 17:55:00+00:00</td> <td>0.692934</td> <td>0.109437</td> </tr> <tr> <td>6e5024ce-65ed-47f3-b296-edb2813e3c5b.png</td> <td>portrait of barbaric spanish conquistador, symmetrical, by yoichi hatakenaka, studio ghibli and dan mumford</td> <td>286</td> <td>1713292358</td> <td>50</td> <td>7</td> <td>8</td> <td>512</td> <td>640</td> <td>1c2e93cfb1430adbd956be9c690705fe295cbee7d9ac12de1953ce5e76d89906</td> <td>2022-08-12 03:26:00+00:00</td> <td>0.0773138</td> <td>0.0249675</td> </tr> </tbody> </table>\n\n#### [](#metadata-schema)Metadata Schema\n\n`metadata.parquet` and `metatable-large.parquet` share the same schema.\n\n<table> <thead> <tr> <th>Column</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code>image_name</code></td> <td><code>string</code></td> <td>Image UUID filename.</td> </tr> <tr> <td><code>prompt</code></td> <td><code>string</code></td> <td>The text prompt used to generate this image.</td> </tr> <tr> <td><code>part_id</code></td> <td><code>uint16</code></td> <td>Folder ID of this image.</td> </tr> <tr> <td><code>seed</code></td> <td><code>uint32</code></td> <td>Random seed used to generate this image.</td> </tr> <tr> <td><code>step</code></td> <td><code>uint16</code></td> <td>Step count (hyperparameter).</td> </tr> <tr> <td><code>cfg</code></td> <td><code>float32</code></td> <td>Guidance scale (hyperparameter).</td> </tr> <tr> <td><code>sampler</code></td> <td><code>uint8</code></td> <td>Sampler method (hyperparameter). Mapping: <code>{1: \"ddim\", 2: \"plms\", 3: \"k_euler\", 4: \"k_euler_ancestral\", 5: \"k_heun\", 6: \"k_dpm_2\", 7: \"k_dpm_2_ancestral\", 8: \"k_lms\", 9: \"others\"}</code>.</td> </tr> <tr> <td><code>width</code></td> <td><code>uint16</code></td> <td>Image width.</td> </tr> <tr> <td><code>height</code></td> <td><code>uint16</code></td> <td>Image height.</td> </tr> <tr> <td><code>user_name</code></td> <td><code>string</code></td> <td>The unique discord ID\u2019s SHA256 hash of the user who generated this image. For example, the hash for <code>xiaohk#3146</code> is <code>e285b7ef63be99e9107cecd79b280bde602f17e0ca8363cb7a0889b67f0b5ed0</code>. \u201cdeleted_account\u201d refer to users who have deleted their accounts. None means the image has been deleted before we scrape it for the second time.</td> </tr> <tr> <td><code>timestamp</code></td> <td><code>timestamp</code></td> <td>UTC Timestamp when this image was generated. None means the image has been deleted before we scrape it for the second time. Note that timestamp is not accurate for duplicate images that have the same prompt, hypareparameters, width, height.</td> </tr> <tr> <td><code>image_nsfw</code></td> <td><code>float32</code></td> <td>Likelihood of an image being NSFW. Scores are predicted by <a href=\"https://github.com/LAION-AI/LAION-SAFETY\">LAION\u2019s state-of-art NSFW detector</a> (range from 0 to 1). A score of 2.0 means the image has already been flagged as NSFW and blurred by Stable Diffusion.</td> </tr> <tr> <td><code>prompt_nsfw</code></td> <td><code>float32</code></td> <td>Likelihood of a prompt being NSFW. Scores are predicted by the library <a href=\"https://github.com/unitaryai/detoxify\">Detoxicy</a>. Each score represents the maximum of <code>toxicity</code> and <code>sexual_explicit</code> (range from 0 to 1).</td> </tr> </tbody> </table>\n\n&gt; **Warning** Although the Stable Diffusion model has an NSFW filter that automatically blurs user-generated NSFW images, this NSFW filter is not perfect\u2014DiffusionDB still contains some NSFW images. Therefore, we compute and provide the NSFW scores for images and prompts using the state-of-the-art models. The distribution of these scores is shown below. Please decide an appropriate NSFW score threshold to filter out NSFW images before using DiffusionDB in your projects.\n\n![](https://i.imgur.com/1RiGAXL.png)\n\n### [](#data-splits)Data Splits\n\nFor DiffusionDB 2M, we split 2 million images into 2,000 folders where each folder contains 1,000 images and a JSON file. For DiffusionDB Large, we split 14 million images into 14,000 folders where each folder contains 1,000 images and a JSON file.\n\n### [](#loading-data-subsets)Loading Data Subsets\n\nDiffusionDB is large (1.6TB or 6.5 TB)! However, with our modularized file structure, you can easily load a desirable number of images and their prompts and hyperparameters. In the [`example-loading.ipynb`](https://github.com/poloclub/diffusiondb/blob/main/notebooks/example-loading.ipynb) notebook, we demonstrate three methods to load a subset of DiffusionDB. Below is a short summary.\n\n#### [](#method-1-using-hugging-face-datasets-loader)Method 1: Using Hugging Face Datasets Loader\n\nYou can use the Hugging Face [`Datasets`](https://huggingface.co/docs/datasets/quickstart) library to easily load prompts and images from DiffusionDB. We pre-defined 16 DiffusionDB subsets (configurations) based on the number of instances. You can see all subsets in the [Dataset Preview](https://huggingface.co/datasets/poloclub/diffusiondb/viewer/all/train).\n\n    import numpy as np\n    from datasets import load_dataset\n    \n    # Load the dataset with the `large_random_1k` subset\n    dataset = load_dataset('poloclub/diffusiondb', 'large_random_1k')\n    \n\n#### [](#method-2-use-the-poloclub-downloader)Method 2. Use the PoloClub Downloader\n\nThis repo includes a Python downloader [`download.py`](https://github.com/poloclub/diffusiondb/blob/main/scripts/download.py) that allows you to download and load DiffusionDB. You can use it from your command line. Below is an example of loading a subset of DiffusionDB.\n\n##### [](#usageexamples)Usage/Examples\n\nThe script is run using command-line arguments as follows:\n\n*   `-i` `--index` - File to download or lower bound of a range of files if `-r` is also set.\n*   `-r` `--range` - Upper bound of range of files to download if `-i` is set.\n*   `-o` `--output` - Name of custom output directory. Defaults to the current directory if not set.\n*   `-z` `--unzip` - Unzip the file/files after downloading\n*   `-l` `--large` - Download from Diffusion DB Large. Defaults to Diffusion DB 2M.\n\n###### [](#downloading-a-single-file)Downloading a single file\n\nThe specific file to download is supplied as the number at the end of the file on HuggingFace. The script will automatically pad the number out and generate the URL.\n\n    python download.py -i 23\n    \n\n###### [](#downloading-a-range-of-files)Downloading a range of files\n\nThe upper and lower bounds of the set of files to download are set by the `-i` and `-r` flags respectively.\n\n    python download.py -i 1 -r 2000\n    \n\nNote that this range will download the entire dataset. The script will ask you to confirm that you have 1.7Tb free at the download destination.\n\n###### [](#downloading-to-a-specific-directory)Downloading to a specific directory\n\nThe script will default to the location of the dataset\u2019s `part` .zip files at `images/`. If you wish to move the download location, you should move these files as well or use a symbolic link.\n\n    python download.py -i 1 -r 2000 -o /home/$USER/datahoarding/etc\n    \n\nAgain, the script will automatically add the `/` between the directory and the file when it downloads.\n\n###### [](#setting-the-files-to-unzip-once-theyve-been-downloaded)Setting the files to unzip once they\u2019ve been downloaded\n\nThe script is set to unzip the files _after_ all files have downloaded as both can be lengthy processes in certain circumstances.\n\n    python download.py -i 1 -r 2000 -z\n    \n\n#### [](#method-3-use-metadataparquet-text-only)Method 3. Use `metadata.parquet` (Text Only)\n\nIf your task does not require images, then you can easily access all 2 million prompts and hyperparameters in the `metadata.parquet` table.\n\n    from urllib.request import urlretrieve\n    import pandas as pd\n    \n    # Download the parquet table\n    table_url = f'https://huggingface.co/datasets/poloclub/diffusiondb/resolve/main/metadata.parquet'\n    urlretrieve(table_url, 'metadata.parquet')\n    \n    # Read the table using Pandas\n    metadata_df = pd.read_parquet('metadata.parquet')\n    \n\n[](#dataset-creation)Dataset Creation\n-------------------------------------\n\n### [](#curation-rationale)Curation Rationale\n\nRecent diffusion models have gained immense popularity by enabling high-quality and controllable image generation based on text prompts written in natural language. Since the release of these models, people from different domains have quickly applied them to create award-winning artworks, synthetic radiology images, and even hyper-realistic videos.\n\nHowever, generating images with desired details is difficult, as it requires users to write proper prompts specifying the exact expected results. Developing such prompts requires trial and error, and can often feel random and unprincipled. Simon Willison analogizes writing prompts to wizards learning \u201cmagical spells\u201d: users do not understand why some prompts work, but they will add these prompts to their \u201cspell book.\u201d For example, to generate highly-detailed images, it has become a common practice to add special keywords such as \u201ctrending on artstation\u201d and \u201cunreal engine\u201d in the prompt.\n\nPrompt engineering has become a field of study in the context of text-to-text generation, where researchers systematically investigate how to construct prompts to effectively solve different down-stream tasks. As large text-to-image models are relatively new, there is a pressing need to understand how these models react to prompts, how to write effective prompts, and how to design tools to help users generate images. To help researchers tackle these critical challenges, we create DiffusionDB, the first large-scale prompt dataset with 14 million real prompt-image pairs.\n\n### [](#source-data)Source Data\n\n#### [](#initial-data-collection-and-normalization)Initial Data Collection and Normalization\n\nWe construct DiffusionDB by scraping user-generated images on the official Stable Diffusion Discord server. We choose Stable Diffusion because it is currently the only open-source large text-to-image generative model, and all generated images have a CC0 1.0 Universal Public Domain Dedication license that waives all copyright and allows uses for any purpose. We choose the official [Stable Diffusion Discord server](https://discord.gg/stablediffusion) because it is public, and it has strict rules against generating and sharing illegal, hateful, or NSFW (not suitable for work, such as sexual and violent content) images. The server also disallows users to write or share prompts with personal information.\n\n#### [](#who-are-the-source-language-producers)Who are the source language producers?\n\nThe language producers are users of the official [Stable Diffusion Discord server](https://discord.gg/stablediffusion).\n\n### [](#annotations)Annotations\n\nThe dataset does not contain any additional annotations.\n\n#### [](#annotation-process)Annotation process\n\n\\[N/A\\]\n\n#### [](#who-are-the-annotators)Who are the annotators?\n\n\\[N/A\\]\n\n### [](#personal-and-sensitive-information)Personal and Sensitive Information\n\nThe authors removed the discord usernames from the dataset. We decide to anonymize the dataset because some prompts might include sensitive information: explicitly linking them to their creators can cause harm to creators.\n\n[](#considerations-for-using-the-data)Considerations for Using the Data\n-----------------------------------------------------------------------\n\n### [](#social-impact-of-dataset)Social Impact of Dataset\n\nThe purpose of this dataset is to help develop better understanding of large text-to-image generative models. The unprecedented scale and diversity of this human-actuated dataset provide exciting research opportunities in understanding the interplay between prompts and generative models, detecting deepfakes, and designing human-AI interaction tools to help users more easily use these models.\n\nIt should note that we collect images and their prompts from the Stable Diffusion Discord server. The Discord server has rules against users generating or sharing harmful or NSFW (not suitable for work, such as sexual and violent content) images. The Stable Diffusion model used in the server also has an NSFW filter that blurs the generated images if it detects NSFW content. However, it is still possible that some users had generated harmful images that were not detected by the NSFW filter or removed by the server moderators. Therefore, DiffusionDB can potentially contain these images. To mitigate the potential harm, we provide a [Google Form](https://forms.gle/GbYaSpRNYqxCafMZ9) on the [DiffusionDB website](https://poloclub.github.io/diffusiondb/) where users can report harmful or inappropriate images and prompts. We will closely monitor this form and remove reported images and prompts from DiffusionDB.\n\n### [](#discussion-of-biases)Discussion of Biases\n\nThe 14 million images in DiffusionDB have diverse styles and categories. However, Discord can be a biased data source. Our images come from channels where early users could use a bot to use Stable Diffusion before release. As these users had started using Stable Diffusion before the model was public, we hypothesize that they are AI art enthusiasts and are likely to have experience with other text-to-image generative models. Therefore, the prompting style in DiffusionDB might not represent novice users. Similarly, the prompts in DiffusionDB might not generalize to domains that require specific knowledge, such as medical images.\n\n### [](#other-known-limitations)Other Known Limitations\n\n**Generalizability.** Previous research has shown a prompt that works well on one generative model might not give the optimal result when used in other models. Therefore, different models can need users to write different prompts. For example, many Stable Diffusion prompts use commas to separate keywords, while this pattern is less seen in prompts for DALL-E 2 or Midjourney. Thus, we caution researchers that some research findings from DiffusionDB might not be generalizable to other text-to-image generative models.\n\n[](#additional-information)Additional Information\n-------------------------------------------------\n\n### [](#dataset-curators)Dataset Curators\n\nDiffusionDB is created by [Jay Wang](https://zijie.wang), [Evan Montoya](https://www.linkedin.com/in/evan-montoya-b252391b4/), [David Munechika](https://www.linkedin.com/in/dmunechika/), [Alex Yang](https://alexanderyang.me), [Ben Hoover](https://www.bhoov.com), [Polo Chau](https://faculty.cc.gatech.edu/~dchau/).\n\n### [](#licensing-information)Licensing Information\n\nThe DiffusionDB dataset is available under the [CC0 1.0 License](https://creativecommons.org/publicdomain/zero/1.0/). The Python code in this repository is available under the [MIT License](https://github.com/poloclub/diffusiondb/blob/main/LICENSE).\n\n### [](#citation-information)Citation Information\n\n    @article{wangDiffusionDBLargescalePrompt2022,\n      title = :  Large-Scale Prompt Gallery Dataset for Text-to-Image Generative Models},\n      author = {Wang, Zijie J. and Montoya, Evan and Munechika, David and Yang, Haoyang and Hoover, Benjamin and Chau, Duen Horng},\n      year = {2022},\n      journal = {arXiv:2210.14896 [cs]},\n      url = {https://arxiv.org/abs/2210.14896}\n    }\n    \n\n### [](#contributions)Contributions\n\nIf you have any questions, feel free to [open an issue](https://github.com/poloclub/diffusiondb/issues/new) or contact [Jay Wang](https://zijie.wang).</b>",
  "datasetId": 2904563,
  "datasetSlug": "diffusiondb-2m-part-0001-to-0100-of-2000",
  "hasDatasetSlug": true,
  "ownerUser": "dschettler8845",
  "hasOwnerUser": true,
  "usabilityRating": 1.0,
  "hasUsabilityRating": true,
  "totalViews": 11656,
  "totalVotes": 64,
  "totalDownloads": 1854,
  "title": "DiffusionDB-2M \u2013\u2013 Part 0001 to 0100 of 2000",
  "hasTitle": true,
  "subtitle": "2 Million Image-Prompt Pairs -- Part 1 of 20",
  "hasSubtitle": true,
  "description": "<br>\n\n<h2><b>IMPORTANT NOTE</b></h2>\n\nThis Kaggle dataset represents 1 of 20 parts that make up the DiffusionDB 2Million Image-Prompt Subset Dataset. The description and information below comes directly from the DiffusionDB website and is not specific to this Kaggle dataset. I am not the author of this work, I am just the person who downloaded, unzipped, rezipped, and uploaded it to Kaggle. Please pass all your kudos and whatnot on to the original authors at the following website:\n* <a href=\"https://poloclub.github.io/diffusiondb/\">https://poloclub.github.io/diffusiondb/</a>\n\n<br>\n\n<b>Links to the other parts of this dataset available on Kaggle can be found below:\n<ol>\n<li><b><a href=\"https://www.kaggle.com/datasets/dschettler8845/diffusiondb-2m-part-0001-to-0100-of-2000\">DiffusionDB-2M \u2013\u2013 Part 0001 to 0100 of 2000</a></b></li>\n<li><b><a href=\"https://www.kaggle.com/datasets/dschettler8845/diffusiondb-2m-part-0101-to-0200-of-2000\">DiffusionDB-2M \u2013\u2013 Part 0101 to 0200 of 2000</a></b></li>\n<li><b><a href=\"https://www.kaggle.com/datasets/dschettler8845/diffusiondb-2m-part-0201-to-0300-of-2000\">DiffusionDB-2M \u2013\u2013 Part 0201 to 0300 of 2000</a></b></li>\n<li>TBD</li>\n</ol>\n<br>\n\n---\n\n<br>\n\n[DiffusionDB](/diffusiondb/)[](#)\n\n*   [Home](/diffusiondb/)\n*   [Datasheet](/diffusiondb/datasheet.html)\n\n*   [DiffusionDB on GitHub](https://github.com/poloclub/diffusiondb)\n*   [Download DiffusionDB on Hugging Face](https://huggingface.co/datasets/poloclub/diffusiondb)\n\nThis site uses [Just the Docs](https://github.com/just-the-docs/just-the-docs), a documentation theme for Jekyll.\n\n[](#diffusiondb)DiffusionDB\n===========================\n\n![](https://user-images.githubusercontent.com/15007159/201762588-f24db2b8-dbb2-4a94-947b-7de393fc3d33.gif)\n\n[](#table-of-contents)Table of Contents\n---------------------------------------\n\n*   [DiffusionDB](#diffusiondb)\n    *   [Table of Contents](#table-of-contents)\n    *   [Dataset Description](#dataset-description)\n        *   [Dataset Summary](#dataset-summary)\n        *   [Supported Tasks and Leaderboards](#supported-tasks-and-leaderboards)\n        *   [Languages](#languages)\n        *   [Two Subsets](#two-subsets)\n            *   [Key Differences](#key-differences)\n    *   [Dataset Structure](#dataset-structure)\n        *   [Data Instances](#data-instances)\n        *   [Data Fields](#data-fields)\n        *   [Dataset Metadata](#dataset-metadata)\n            *   [Metadata Schema](#metadata-schema)\n        *   [Data Splits](#data-splits)\n        *   [Loading Data Subsets](#loading-data-subsets)\n            *   [Method 1: Using Hugging Face Datasets Loader](#method-1-using-hugging-face-datasets-loader)\n            *   [Method 2. Use the PoloClub Downloader](#method-2-use-the-poloclub-downloader)\n                *   [Usage/Examples](#usageexamples)\n                    *   [Downloading a single file](#downloading-a-single-file)\n                    *   [Downloading a range of files](#downloading-a-range-of-files)\n                    *   [Downloading to a specific directory](#downloading-to-a-specific-directory)\n                    *   [Setting the files to unzip once they\u2019ve been downloaded](#setting-the-files-to-unzip-once-theyve-been-downloaded)\n            *   [Method 3. Use `metadata.parquet` (Text Only)](#method-3-use-metadataparquet-text-only)\n    *   [Dataset Creation](#dataset-creation)\n        *   [Curation Rationale](#curation-rationale)\n        *   [Source Data](#source-data)\n            *   [Initial Data Collection and Normalization](#initial-data-collection-and-normalization)\n            *   [Who are the source language producers?](#who-are-the-source-language-producers)\n        *   [Annotations](#annotations)\n            *   [Annotation process](#annotation-process)\n            *   [Who are the annotators?](#who-are-the-annotators)\n        *   [Personal and Sensitive Information](#personal-and-sensitive-information)\n    *   [Considerations for Using the Data](#considerations-for-using-the-data)\n        *   [Social Impact of Dataset](#social-impact-of-dataset)\n        *   [Discussion of Biases](#discussion-of-biases)\n        *   [Other Known Limitations](#other-known-limitations)\n    *   [Additional Information](#additional-information)\n        *   [Dataset Curators](#dataset-curators)\n        *   [Licensing Information](#licensing-information)\n        *   [Citation Information](#citation-information)\n        *   [Contributions](#contributions)\n\n[](#dataset-description)Dataset Description\n-------------------------------------------\n\n*   **Homepage:** [DiffusionDB homepage](https://poloclub.github.io/diffusiondb)\n*   **Repository:** [DiffusionDB repository](https://github.com/poloclub/diffusiondb)\n*   **Distribution:** [DiffusionDB Hugging Face Dataset](https://huggingface.co/datasets/poloclub/diffusiondb)\n*   **Paper:** [DiffusionDB: A Large-scale Prompt Gallery Dataset for Text-to-Image Generative Models](https://arxiv.org/abs/2210.14896)\n*   **Point of Contact:** [Jay Wang](mailto:jayw@gatech.edu)\n\n### [](#dataset-summary)Dataset Summary\n\nDiffusionDB is the first large-scale text-to-image prompt dataset. It contains **14 million** images generated by Stable Diffusion using prompts and hyperparameters specified by real users.\n\nDiffusionDB is publicly available at [\ud83e\udd17 Hugging Face Dataset](https://huggingface.co/datasets/poloclub/diffusiondb).\n\n### [](#supported-tasks-and-leaderboards)Supported Tasks and Leaderboards\n\nThe unprecedented scale and diversity of this human-actuated dataset provide exciting research opportunities in understanding the interplay between prompts and generative models, detecting deepfakes, and designing human-AI interaction tools to help users more easily use these models.\n\n### [](#languages)Languages\n\nThe text in the dataset is mostly English. It also contains other languages such as Spanish, Chinese, and Russian.\n\n### [](#two-subsets)Two Subsets\n\nDiffusionDB provides two subsets (DiffusionDB 2M and DiffusionDB Large) to support different needs.\n\n<table> <thead> <tr> <th>Subset</th> <th>Num of Images</th> <th>Num of Unique Prompts</th> <th>Size</th> <th>Image Directory</th> <th>Metadata Table</th> </tr> </thead> <tbody> <tr> <td>DiffusionDB 2M</td> <td>2M</td> <td>1.5M</td> <td>1.6TB</td> <td><code>images/</code></td> <td><code>metadata.parquet</code></td> </tr> <tr> <td>DiffusionDB Large</td> <td>14M</td> <td>1.8M</td> <td>6.5TB</td> <td><code>diffusiondb-large-part-1/</code> <code>diffusiondb-large-part-2/</code></td> <td><code>metadata-large.parquet</code></td> </tr> </tbody> </table>\n##### [](#key-differences)Key Differences\n\n1.  Two subsets have a similar number of unique prompts, but DiffusionDB Large has much more images. DiffusionDB Large is a superset of DiffusionDB 2M.\n2.  Images in DiffusionDB 2M are stored in `png` format; images in DiffusionDB Large use a lossless `webp` format.\n\n[](#dataset-structure)Dataset Structure\n---------------------------------------\n\nWe use a modularized file structure to distribute DiffusionDB. The 2 million images in DiffusionDB 2M are split into 2,000 folders, where each folder contains 1,000 images and a JSON file that links these 1,000 images to their prompts and hyperparameters. Similarly, the 14 million images in DiffusionDB Large are split into 14,000 folders.\n\n    # DiffusionDB 2M\n    ./\n    \u251c\u2500\u2500 images\n    \u2502   \u251c\u2500\u2500 part-000001\n    \u2502   \u2502   \u251c\u2500\u2500 3bfcd9cf-26ea-4303-bbe1-b095853f5360.png\n    \u2502   \u2502   \u251c\u2500\u2500 5f47c66c-51d4-4f2c-a872-a68518f44adb.png\n    \u2502   \u2502   \u251c\u2500\u2500 66b428b9-55dc-4907-b116-55aaa887de30.png\n    \u2502   \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2502   \u2514\u2500\u2500 part-000001.json\n    \u2502   \u251c\u2500\u2500 part-000002\n    \u2502   \u251c\u2500\u2500 part-000003\n    \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2514\u2500\u2500 part-002000\n    \u2514\u2500\u2500 metadata.parquet\n    \n\n    # DiffusionDB Large\n    ./\n    \u251c\u2500\u2500 diffusiondb-large-part-1\n    \u2502   \u251c\u2500\u2500 part-000001\n    \u2502   \u2502   \u251c\u2500\u2500 0a8dc864-1616-4961-ac18-3fcdf76d3b08.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0a25cacb-5d91-4f27-b18a-bd423762f811.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0a52d584-4211-43a0-99ef-f5640ee2fc8c.webp\n    \u2502   \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2502   \u2514\u2500\u2500 part-000001.json\n    \u2502   \u251c\u2500\u2500 part-000002\n    \u2502   \u251c\u2500\u2500 part-000003\n    \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2514\u2500\u2500 part-010000\n    \u251c\u2500\u2500 diffusiondb-large-part-2\n    \u2502   \u251c\u2500\u2500 part-010001\n    \u2502   \u2502   \u251c\u2500\u2500 0a68f671-3776-424c-91b6-c09a0dd6fc2d.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0a0756e9-1249-4fe2-a21a-12c43656c7a3.webp\n    \u2502   \u2502   \u251c\u2500\u2500 0aa48f3d-f2d9-40a8-a800-c2c651ebba06.webp\n    \u2502   \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2502   \u2514\u2500\u2500 part-000001.json\n    \u2502   \u251c\u2500\u2500 part-010002\n    \u2502   \u251c\u2500\u2500 part-010003\n    \u2502   \u251c\u2500\u2500 [...]\n    \u2502   \u2514\u2500\u2500 part-014000\n    \u2514\u2500\u2500 metadata-large.parquet\n    \n\nThese sub-folders have names `part-0xxxxx`, and each image has a unique name generated by [UUID Version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier). The JSON file in a sub-folder has the same name as the sub-folder. Each image is a `PNG` file (DiffusionDB 2M) or a lossless `WebP` file (DiffusionDB Large). The JSON file contains key-value pairs mapping image filenames to their prompts and hyperparameters.\n\n### [](#data-instances)Data Instances\n\nFor example, below is the image of `f3501e05-aef7-4225-a9e9-f516527408ac.png` and its key-value pair in `part-000001.json`.\n\n![](https://i.imgur.com/gqWcRs2.png)\n\n    {\n      \"f3501e05-aef7-4225-a9e9-f516527408ac.png\": {\n        \"p\": \"geodesic landscape, john chamberlain, christopher balaskas, tadao ando, 4 k, \",\n        \"se\": 38753269,\n        \"c\": 12.0,\n        \"st\": 50,\n        \"sa\": \"k_lms\"\n      },\n    }\n    \n\n### [](#data-fields)Data Fields\n\n*   key: Unique image name\n*   `p`: Prompt\n*   `se`: Random seed\n*   `c`: CFG Scale (guidance scale)\n*   `st`: Steps\n*   `sa`: Sampler\n\n### [](#dataset-metadata)Dataset Metadata\n\nTo help you easily access prompts and other attributes of images without downloading all the Zip files, we include two metadata tables `metadata.parquet` and `metadata-large.parquet` for DiffusionDB 2M and DiffusionDB Large, respectively.\n\nThe shape of `metadata.parquet` is (2000000, 13) and the shape of `metatable-large.parquet` is (14000000, 13). Two tables share the same schema, and each row represents an image. We store these tables in the Parquet format because Parquet is column-based: you can efficiently query individual columns (e.g., prompts) without reading the entire table.\n\nBelow are three random rows from `metadata.parquet`.\n\n<table> <thead> <tr> <th>image_name</th> <th>prompt</th> <th>part_id</th> <th>seed</th> <th>step</th> <th>cfg</th> <th>sampler</th> <th>width</th> <th>height</th> <th>user_name</th> <th>timestamp</th> <th>image_nsfw</th> <th>prompt_nsfw</th> </tr> </thead> <tbody> <tr> <td>0c46f719-1679-4c64-9ba9-f181e0eae811.png</td> <td>a small liquid sculpture, corvette, viscous, reflective, digital art</td> <td>1050</td> <td>2026845913</td> <td>50</td> <td>7</td> <td>8</td> <td>512</td> <td>512</td> <td>c2f288a2ba9df65c38386ffaaf7749106fed29311835b63d578405db9dbcafdb</td> <td>2022-08-11 09:05:00+00:00</td> <td>0.0845108</td> <td>0.00383462</td> </tr> <tr> <td>a00bdeaa-14eb-4f6c-a303-97732177eae9.png</td> <td>human sculpture of lanky tall alien on a romantic date at italian restaurant with smiling woman, nice restaurant, photography, bokeh</td> <td>905</td> <td>1183522603</td> <td>50</td> <td>10</td> <td>8</td> <td>512</td> <td>768</td> <td>df778e253e6d32168eb22279a9776b3cde107cc82da05517dd6d114724918651</td> <td>2022-08-19 17:55:00+00:00</td> <td>0.692934</td> <td>0.109437</td> </tr> <tr> <td>6e5024ce-65ed-47f3-b296-edb2813e3c5b.png</td> <td>portrait of barbaric spanish conquistador, symmetrical, by yoichi hatakenaka, studio ghibli and dan mumford</td> <td>286</td> <td>1713292358</td> <td>50</td> <td>7</td> <td>8</td> <td>512</td> <td>640</td> <td>1c2e93cfb1430adbd956be9c690705fe295cbee7d9ac12de1953ce5e76d89906</td> <td>2022-08-12 03:26:00+00:00</td> <td>0.0773138</td> <td>0.0249675</td> </tr> </tbody> </table>\n\n#### [](#metadata-schema)Metadata Schema\n\n`metadata.parquet` and `metatable-large.parquet` share the same schema.\n\n<table> <thead> <tr> <th>Column</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code>image_name</code></td> <td><code>string</code></td> <td>Image UUID filename.</td> </tr> <tr> <td><code>prompt</code></td> <td><code>string</code></td> <td>The text prompt used to generate this image.</td> </tr> <tr> <td><code>part_id</code></td> <td><code>uint16</code></td> <td>Folder ID of this image.</td> </tr> <tr> <td><code>seed</code></td> <td><code>uint32</code></td> <td>Random seed used to generate this image.</td> </tr> <tr> <td><code>step</code></td> <td><code>uint16</code></td> <td>Step count (hyperparameter).</td> </tr> <tr> <td><code>cfg</code></td> <td><code>float32</code></td> <td>Guidance scale (hyperparameter).</td> </tr> <tr> <td><code>sampler</code></td> <td><code>uint8</code></td> <td>Sampler method (hyperparameter). Mapping: <code>{1: \"ddim\", 2: \"plms\", 3: \"k_euler\", 4: \"k_euler_ancestral\", 5: \"k_heun\", 6: \"k_dpm_2\", 7: \"k_dpm_2_ancestral\", 8: \"k_lms\", 9: \"others\"}</code>.</td> </tr> <tr> <td><code>width</code></td> <td><code>uint16</code></td> <td>Image width.</td> </tr> <tr> <td><code>height</code></td> <td><code>uint16</code></td> <td>Image height.</td> </tr> <tr> <td><code>user_name</code></td> <td><code>string</code></td> <td>The unique discord ID\u2019s SHA256 hash of the user who generated this image. For example, the hash for <code>xiaohk#3146</code> is <code>e285b7ef63be99e9107cecd79b280bde602f17e0ca8363cb7a0889b67f0b5ed0</code>. \u201cdeleted_account\u201d refer to users who have deleted their accounts. None means the image has been deleted before we scrape it for the second time.</td> </tr> <tr> <td><code>timestamp</code></td> <td><code>timestamp</code></td> <td>UTC Timestamp when this image was generated. None means the image has been deleted before we scrape it for the second time. Note that timestamp is not accurate for duplicate images that have the same prompt, hypareparameters, width, height.</td> </tr> <tr> <td><code>image_nsfw</code></td> <td><code>float32</code></td> <td>Likelihood of an image being NSFW. Scores are predicted by <a href=\"https://github.com/LAION-AI/LAION-SAFETY\">LAION\u2019s state-of-art NSFW detector</a> (range from 0 to 1). A score of 2.0 means the image has already been flagged as NSFW and blurred by Stable Diffusion.</td> </tr> <tr> <td><code>prompt_nsfw</code></td> <td><code>float32</code></td> <td>Likelihood of a prompt being NSFW. Scores are predicted by the library <a href=\"https://github.com/unitaryai/detoxify\">Detoxicy</a>. Each score represents the maximum of <code>toxicity</code> and <code>sexual_explicit</code> (range from 0 to 1).</td> </tr> </tbody> </table>\n\n&gt; **Warning** Although the Stable Diffusion model has an NSFW filter that automatically blurs user-generated NSFW images, this NSFW filter is not perfect\u2014DiffusionDB still contains some NSFW images. Therefore, we compute and provide the NSFW scores for images and prompts using the state-of-the-art models. The distribution of these scores is shown below. Please decide an appropriate NSFW score threshold to filter out NSFW images before using DiffusionDB in your projects.\n\n![](https://i.imgur.com/1RiGAXL.png)\n\n### [](#data-splits)Data Splits\n\nFor DiffusionDB 2M, we split 2 million images into 2,000 folders where each folder contains 1,000 images and a JSON file. For DiffusionDB Large, we split 14 million images into 14,000 folders where each folder contains 1,000 images and a JSON file.\n\n### [](#loading-data-subsets)Loading Data Subsets\n\nDiffusionDB is large (1.6TB or 6.5 TB)! However, with our modularized file structure, you can easily load a desirable number of images and their prompts and hyperparameters. In the [`example-loading.ipynb`](https://github.com/poloclub/diffusiondb/blob/main/notebooks/example-loading.ipynb) notebook, we demonstrate three methods to load a subset of DiffusionDB. Below is a short summary.\n\n#### [](#method-1-using-hugging-face-datasets-loader)Method 1: Using Hugging Face Datasets Loader\n\nYou can use the Hugging Face [`Datasets`](https://huggingface.co/docs/datasets/quickstart) library to easily load prompts and images from DiffusionDB. We pre-defined 16 DiffusionDB subsets (configurations) based on the number of instances. You can see all subsets in the [Dataset Preview](https://huggingface.co/datasets/poloclub/diffusiondb/viewer/all/train).\n\n    import numpy as np\n    from datasets import load_dataset\n    \n    # Load the dataset with the `large_random_1k` subset\n    dataset = load_dataset('poloclub/diffusiondb', 'large_random_1k')\n    \n\n#### [](#method-2-use-the-poloclub-downloader)Method 2. Use the PoloClub Downloader\n\nThis repo includes a Python downloader [`download.py`](https://github.com/poloclub/diffusiondb/blob/main/scripts/download.py) that allows you to download and load DiffusionDB. You can use it from your command line. Below is an example of loading a subset of DiffusionDB.\n\n##### [](#usageexamples)Usage/Examples\n\nThe script is run using command-line arguments as follows:\n\n*   `-i` `--index` - File to download or lower bound of a range of files if `-r` is also set.\n*   `-r` `--range` - Upper bound of range of files to download if `-i` is set.\n*   `-o` `--output` - Name of custom output directory. Defaults to the current directory if not set.\n*   `-z` `--unzip` - Unzip the file/files after downloading\n*   `-l` `--large` - Download from Diffusion DB Large. Defaults to Diffusion DB 2M.\n\n###### [](#downloading-a-single-file)Downloading a single file\n\nThe specific file to download is supplied as the number at the end of the file on HuggingFace. The script will automatically pad the number out and generate the URL.\n\n    python download.py -i 23\n    \n\n###### [](#downloading-a-range-of-files)Downloading a range of files\n\nThe upper and lower bounds of the set of files to download are set by the `-i` and `-r` flags respectively.\n\n    python download.py -i 1 -r 2000\n    \n\nNote that this range will download the entire dataset. The script will ask you to confirm that you have 1.7Tb free at the download destination.\n\n###### [](#downloading-to-a-specific-directory)Downloading to a specific directory\n\nThe script will default to the location of the dataset\u2019s `part` .zip files at `images/`. If you wish to move the download location, you should move these files as well or use a symbolic link.\n\n    python download.py -i 1 -r 2000 -o /home/$USER/datahoarding/etc\n    \n\nAgain, the script will automatically add the `/` between the directory and the file when it downloads.\n\n###### [](#setting-the-files-to-unzip-once-theyve-been-downloaded)Setting the files to unzip once they\u2019ve been downloaded\n\nThe script is set to unzip the files _after_ all files have downloaded as both can be lengthy processes in certain circumstances.\n\n    python download.py -i 1 -r 2000 -z\n    \n\n#### [](#method-3-use-metadataparquet-text-only)Method 3. Use `metadata.parquet` (Text Only)\n\nIf your task does not require images, then you can easily access all 2 million prompts and hyperparameters in the `metadata.parquet` table.\n\n    from urllib.request import urlretrieve\n    import pandas as pd\n    \n    # Download the parquet table\n    table_url = f'https://huggingface.co/datasets/poloclub/diffusiondb/resolve/main/metadata.parquet'\n    urlretrieve(table_url, 'metadata.parquet')\n    \n    # Read the table using Pandas\n    metadata_df = pd.read_parquet('metadata.parquet')\n    \n\n[](#dataset-creation)Dataset Creation\n-------------------------------------\n\n### [](#curation-rationale)Curation Rationale\n\nRecent diffusion models have gained immense popularity by enabling high-quality and controllable image generation based on text prompts written in natural language. Since the release of these models, people from different domains have quickly applied them to create award-winning artworks, synthetic radiology images, and even hyper-realistic videos.\n\nHowever, generating images with desired details is difficult, as it requires users to write proper prompts specifying the exact expected results. Developing such prompts requires trial and error, and can often feel random and unprincipled. Simon Willison analogizes writing prompts to wizards learning \u201cmagical spells\u201d: users do not understand why some prompts work, but they will add these prompts to their \u201cspell book.\u201d For example, to generate highly-detailed images, it has become a common practice to add special keywords such as \u201ctrending on artstation\u201d and \u201cunreal engine\u201d in the prompt.\n\nPrompt engineering has become a field of study in the context of text-to-text generation, where researchers systematically investigate how to construct prompts to effectively solve different down-stream tasks. As large text-to-image models are relatively new, there is a pressing need to understand how these models react to prompts, how to write effective prompts, and how to design tools to help users generate images. To help researchers tackle these critical challenges, we create DiffusionDB, the first large-scale prompt dataset with 14 million real prompt-image pairs.\n\n### [](#source-data)Source Data\n\n#### [](#initial-data-collection-and-normalization)Initial Data Collection and Normalization\n\nWe construct DiffusionDB by scraping user-generated images on the official Stable Diffusion Discord server. We choose Stable Diffusion because it is currently the only open-source large text-to-image generative model, and all generated images have a CC0 1.0 Universal Public Domain Dedication license that waives all copyright and allows uses for any purpose. We choose the official [Stable Diffusion Discord server](https://discord.gg/stablediffusion) because it is public, and it has strict rules against generating and sharing illegal, hateful, or NSFW (not suitable for work, such as sexual and violent content) images. The server also disallows users to write or share prompts with personal information.\n\n#### [](#who-are-the-source-language-producers)Who are the source language producers?\n\nThe language producers are users of the official [Stable Diffusion Discord server](https://discord.gg/stablediffusion).\n\n### [](#annotations)Annotations\n\nThe dataset does not contain any additional annotations.\n\n#### [](#annotation-process)Annotation process\n\n\\[N/A\\]\n\n#### [](#who-are-the-annotators)Who are the annotators?\n\n\\[N/A\\]\n\n### [](#personal-and-sensitive-information)Personal and Sensitive Information\n\nThe authors removed the discord usernames from the dataset. We decide to anonymize the dataset because some prompts might include sensitive information: explicitly linking them to their creators can cause harm to creators.\n\n[](#considerations-for-using-the-data)Considerations for Using the Data\n-----------------------------------------------------------------------\n\n### [](#social-impact-of-dataset)Social Impact of Dataset\n\nThe purpose of this dataset is to help develop better understanding of large text-to-image generative models. The unprecedented scale and diversity of this human-actuated dataset provide exciting research opportunities in understanding the interplay between prompts and generative models, detecting deepfakes, and designing human-AI interaction tools to help users more easily use these models.\n\nIt should note that we collect images and their prompts from the Stable Diffusion Discord server. The Discord server has rules against users generating or sharing harmful or NSFW (not suitable for work, such as sexual and violent content) images. The Stable Diffusion model used in the server also has an NSFW filter that blurs the generated images if it detects NSFW content. However, it is still possible that some users had generated harmful images that were not detected by the NSFW filter or removed by the server moderators. Therefore, DiffusionDB can potentially contain these images. To mitigate the potential harm, we provide a [Google Form](https://forms.gle/GbYaSpRNYqxCafMZ9) on the [DiffusionDB website](https://poloclub.github.io/diffusiondb/) where users can report harmful or inappropriate images and prompts. We will closely monitor this form and remove reported images and prompts from DiffusionDB.\n\n### [](#discussion-of-biases)Discussion of Biases\n\nThe 14 million images in DiffusionDB have diverse styles and categories. However, Discord can be a biased data source. Our images come from channels where early users could use a bot to use Stable Diffusion before release. As these users had started using Stable Diffusion before the model was public, we hypothesize that they are AI art enthusiasts and are likely to have experience with other text-to-image generative models. Therefore, the prompting style in DiffusionDB might not represent novice users. Similarly, the prompts in DiffusionDB might not generalize to domains that require specific knowledge, such as medical images.\n\n### [](#other-known-limitations)Other Known Limitations\n\n**Generalizability.** Previous research has shown a prompt that works well on one generative model might not give the optimal result when used in other models. Therefore, different models can need users to write different prompts. For example, many Stable Diffusion prompts use commas to separate keywords, while this pattern is less seen in prompts for DALL-E 2 or Midjourney. Thus, we caution researchers that some research findings from DiffusionDB might not be generalizable to other text-to-image generative models.\n\n[](#additional-information)Additional Information\n-------------------------------------------------\n\n### [](#dataset-curators)Dataset Curators\n\nDiffusionDB is created by [Jay Wang](https://zijie.wang), [Evan Montoya](https://www.linkedin.com/in/evan-montoya-b252391b4/), [David Munechika](https://www.linkedin.com/in/dmunechika/), [Alex Yang](https://alexanderyang.me), [Ben Hoover](https://www.bhoov.com), [Polo Chau](https://faculty.cc.gatech.edu/~dchau/).\n\n### [](#licensing-information)Licensing Information\n\nThe DiffusionDB dataset is available under the [CC0 1.0 License](https://creativecommons.org/publicdomain/zero/1.0/). The Python code in this repository is available under the [MIT License](https://github.com/poloclub/diffusiondb/blob/main/LICENSE).\n\n### [](#citation-information)Citation Information\n\n    @article{wangDiffusionDBLargescalePrompt2022,\n      title = :  Large-Scale Prompt Gallery Dataset for Text-to-Image Generative Models},\n      author = {Wang, Zijie J. and Montoya, Evan and Munechika, David and Yang, Haoyang and Hoover, Benjamin and Chau, Duen Horng},\n      year = {2022},\n      journal = {arXiv:2210.14896 [cs]},\n      url = {https://arxiv.org/abs/2210.14896}\n    }\n    \n\n### [](#contributions)Contributions\n\nIf you have any questions, feel free to [open an issue](https://github.com/poloclub/diffusiondb/issues/new) or contact [Jay Wang](https://zijie.wang).</b>",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "earth and nature",
    "computer science",
    "programming",
    "image",
    "image classification",
    "image generator",
    "image segmentation"
  ],
  "licenses": [
    {
      "nameNullable": "copyright-authors",
      "name": "copyright-authors",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}