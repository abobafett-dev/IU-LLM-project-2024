{
  "id": "frobert/handdrawn-shapes-hds-dataset",
  "id_no": 2181065,
  "datasetSlugNullable": "handdrawn-shapes-hds-dataset",
  "ownerUserNullable": "frobert",
  "usabilityRatingNullable": 0.75,
  "titleNullable": "Hand-drawn Shapes (HDS) Dataset",
  "subtitleNullable": "Images like Rectangles, Ellipses and Triangles with vertices.",
  "descriptionNullable": "I have created this Dataset for my app **[Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586)**.\n\nOn GitHub: https://github.com/frobertpixto/hand-drawn-shapes-dataset\n\nSee the complete DataSheet (as described in https://arxiv.org/pdf/1803.09010.pdf) for the HDS Dataset [here](https://github.com/frobertpixto/hand-drawn-shapes-dataset/blob/main/Datasheet_for_Datasets.HDS.pdf).\n\n## The Images \nOne shape per image. Drawings exist for 4 shapes:\n- Rectangle\n- Ellipse\n- Triangle\n- Other\n\n![Image examples](https://github.com/frobertpixto/hand-drawn-shapes-dataset/blob/main/readme_images/train_images.png?raw=true)\n\nThe Dataset contains images (70px x 70px x 1 gray channel) distributed as:\n\n| Total | Other |Rectangle | Ellipse | Triangle |\n| :---------------:|---------------:|---------------:|---------------:|---------------: |\n| **27292** images  |  7287  |  6956  | 6454 | 6595 |\n\nThe shapes have been size-normalized and centered in a fixed-size image.\n\n\n## Vertices\n\n![Vertices for ellipses](https://github.com/frobertpixto/hand-drawn-shapes-dataset/blob/main/processing/find_vertices/readme_images/vertices_ell.png?raw=true)\n\n\nQuick Geometry refresher:\n- Vertices in shapes are the points where two or more line segments or edges meet (like a corner for a rectangle). \n- Vertices of an ellipse are the 4 corner points at which the ellipse takes the maximum turn. Technically, an ellipse will have 2 vertices and 2 covertices. We will call them all vertices here.\n- The singular of vertices is vertex.\n\nCoordinates of vertices are interesting as they are much **more precise** than just a surrounding box used in [Object detection](https://en.wikipedia.org/wiki/Object_detection).  \nVertices allow us to determine the **angle** of the shape and it **exact size**.   \n\n### Labelling of vertices\nLabelling was done by me using a tool I created in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586).\nFor each image, the tool also generated a csv file with 1 line per vertex.\nEach Vertex has:\n- a x coordinate between 0 and 1\n- a y coordinate between 0 and 1\n\nWhere:\n- (0,0) is the top left corner of the image\n- (1,1) is the bottom right corner of the image\n\nNote that the vertices are in no particular order. I sort them clockwise in the Extract-Transform-Load (ETL) processing.\n\n### Example of a .csv file content for vertices of a rectangle\n```\n0.14,0.28\n0.87,0.29\n0.86,0.67\n0.14,0.67\n```\n\n### Usefulness of vertices\nAside from drawing shapes on images like in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586), another real-life example could be to determine the direction of a car (rectangle) or a ship (ellipse) in a direct overhead view. \n\n\n## Visualization and processing\nI have a few kernels that will allow you to see:\n- the samples in the Extract-Transform-Load (ETL) phase.\n- a complete example of processing (after the ETL).\n\n### Notebooks - Classification - Shape\n- ETL and Classification: [hds-shapes-etl-and-classify](https://www.kaggle.com/frobert/hds-shapes-etl-and-classify) \n### Notebooks - Regression - Determine position of vertices\n| Step | Rectangle |  Ellipse | Triangle |\n| :---------------:|---------------:|---------------:|---------------: |\n| ETL  | [hds-rectangle-1-etl](https://www.kaggle.com/code/frobert/hds-rectangle-1-etl)  | [hds-ellipse-1-etl](https://www.kaggle.com/code/frobert/hds-ellipse-1-etl) | [hds-triangle-1-etl](https://www.kaggle.com/code/frobert/hds-triangle-1-etl) |\n| Regression  | [hds-rectangle-2-regression](https://www.kaggle.com/code/frobert/hds-rectangle-2-regression) | [hds-ellipse-2-regression](https://www.kaggle.com/code/frobert/hds-ellipse-2-regression) | [hds-triangle-2-regression](https://www.kaggle.com/code/frobert/hds-triangle-2-regression) |\n\n## Direct augmentation of the data. \n  - 3 variations were generated per image\n    1. Normal\n    2. 1.5 to 3.0 wider\n    3. 1.5 to 3.0 narrower\n  - One advantage is that I realized that:\n    - People tend to make equilibrated shapes (Circle, Square, Equilateral triangle). \n    - Most elongated images were interesting and sometime presented a different challenge than the original. \n  - This processing was not done for type Other.\n  - I validated them all manually (or we could say visually) and removed the generated images that were not interesting.\n  - This is different than the Augmentation done during Training (like horizontal and vertical flips, rotations) because:\n    - It applies to all images including Validation set and Test set.\n    - Being generated before being drawn provided images of a better quality.\n\nI then used these images to train models that are used in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586) Auto-Shapes feature.\n\n## People who drew the images\nImages were mostly generated by asking people I knew to draw Ellipses, Rectangles and Triangles in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586).  \nPeople were aged from 7 to 87. I asked them to draw the way they wanted, slow or fast. In particular, I did not ask to draw nice shape. It was the **intent** while drawing that interested me.\n\n## Shape of type Other\nThe first ML models had no **Other** shape. I was initially happy with the excellent accuracy when the drawing was actually a rectangle, triangle or ellipse. But when testing internally with [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586), drawings of shapes like stars, hearts or crosses would always be recognized as one of Ellipse, Rectangle or Triangle. It is not a great user experience.\nSo the shape of type Other solves that.\n\n---\nFrancois Robert",
  "datasetId": 2181065,
  "datasetSlug": "handdrawn-shapes-hds-dataset",
  "hasDatasetSlug": true,
  "ownerUser": "frobert",
  "hasOwnerUser": true,
  "usabilityRating": 0.75,
  "hasUsabilityRating": true,
  "totalViews": 3700,
  "totalVotes": 12,
  "totalDownloads": 287,
  "title": "Hand-drawn Shapes (HDS) Dataset",
  "hasTitle": true,
  "subtitle": "Images like Rectangles, Ellipses and Triangles with vertices.",
  "hasSubtitle": true,
  "description": "I have created this Dataset for my app **[Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586)**.\n\nOn GitHub: https://github.com/frobertpixto/hand-drawn-shapes-dataset\n\nSee the complete DataSheet (as described in https://arxiv.org/pdf/1803.09010.pdf) for the HDS Dataset [here](https://github.com/frobertpixto/hand-drawn-shapes-dataset/blob/main/Datasheet_for_Datasets.HDS.pdf).\n\n## The Images \nOne shape per image. Drawings exist for 4 shapes:\n- Rectangle\n- Ellipse\n- Triangle\n- Other\n\n![Image examples](https://github.com/frobertpixto/hand-drawn-shapes-dataset/blob/main/readme_images/train_images.png?raw=true)\n\nThe Dataset contains images (70px x 70px x 1 gray channel) distributed as:\n\n| Total | Other |Rectangle | Ellipse | Triangle |\n| :---------------:|---------------:|---------------:|---------------:|---------------: |\n| **27292** images  |  7287  |  6956  | 6454 | 6595 |\n\nThe shapes have been size-normalized and centered in a fixed-size image.\n\n\n## Vertices\n\n![Vertices for ellipses](https://github.com/frobertpixto/hand-drawn-shapes-dataset/blob/main/processing/find_vertices/readme_images/vertices_ell.png?raw=true)\n\n\nQuick Geometry refresher:\n- Vertices in shapes are the points where two or more line segments or edges meet (like a corner for a rectangle). \n- Vertices of an ellipse are the 4 corner points at which the ellipse takes the maximum turn. Technically, an ellipse will have 2 vertices and 2 covertices. We will call them all vertices here.\n- The singular of vertices is vertex.\n\nCoordinates of vertices are interesting as they are much **more precise** than just a surrounding box used in [Object detection](https://en.wikipedia.org/wiki/Object_detection).  \nVertices allow us to determine the **angle** of the shape and it **exact size**.   \n\n### Labelling of vertices\nLabelling was done by me using a tool I created in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586).\nFor each image, the tool also generated a csv file with 1 line per vertex.\nEach Vertex has:\n- a x coordinate between 0 and 1\n- a y coordinate between 0 and 1\n\nWhere:\n- (0,0) is the top left corner of the image\n- (1,1) is the bottom right corner of the image\n\nNote that the vertices are in no particular order. I sort them clockwise in the Extract-Transform-Load (ETL) processing.\n\n### Example of a .csv file content for vertices of a rectangle\n```\n0.14,0.28\n0.87,0.29\n0.86,0.67\n0.14,0.67\n```\n\n### Usefulness of vertices\nAside from drawing shapes on images like in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586), another real-life example could be to determine the direction of a car (rectangle) or a ship (ellipse) in a direct overhead view. \n\n\n## Visualization and processing\nI have a few kernels that will allow you to see:\n- the samples in the Extract-Transform-Load (ETL) phase.\n- a complete example of processing (after the ETL).\n\n### Notebooks - Classification - Shape\n- ETL and Classification: [hds-shapes-etl-and-classify](https://www.kaggle.com/frobert/hds-shapes-etl-and-classify) \n### Notebooks - Regression - Determine position of vertices\n| Step | Rectangle |  Ellipse | Triangle |\n| :---------------:|---------------:|---------------:|---------------: |\n| ETL  | [hds-rectangle-1-etl](https://www.kaggle.com/code/frobert/hds-rectangle-1-etl)  | [hds-ellipse-1-etl](https://www.kaggle.com/code/frobert/hds-ellipse-1-etl) | [hds-triangle-1-etl](https://www.kaggle.com/code/frobert/hds-triangle-1-etl) |\n| Regression  | [hds-rectangle-2-regression](https://www.kaggle.com/code/frobert/hds-rectangle-2-regression) | [hds-ellipse-2-regression](https://www.kaggle.com/code/frobert/hds-ellipse-2-regression) | [hds-triangle-2-regression](https://www.kaggle.com/code/frobert/hds-triangle-2-regression) |\n\n## Direct augmentation of the data. \n  - 3 variations were generated per image\n    1. Normal\n    2. 1.5 to 3.0 wider\n    3. 1.5 to 3.0 narrower\n  - One advantage is that I realized that:\n    - People tend to make equilibrated shapes (Circle, Square, Equilateral triangle). \n    - Most elongated images were interesting and sometime presented a different challenge than the original. \n  - This processing was not done for type Other.\n  - I validated them all manually (or we could say visually) and removed the generated images that were not interesting.\n  - This is different than the Augmentation done during Training (like horizontal and vertical flips, rotations) because:\n    - It applies to all images including Validation set and Test set.\n    - Being generated before being drawn provided images of a better quality.\n\nI then used these images to train models that are used in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586) Auto-Shapes feature.\n\n## People who drew the images\nImages were mostly generated by asking people I knew to draw Ellipses, Rectangles and Triangles in [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586).  \nPeople were aged from 7 to 87. I asked them to draw the way they wanted, slow or fast. In particular, I did not ask to draw nice shape. It was the **intent** while drawing that interested me.\n\n## Shape of type Other\nThe first ML models had no **Other** shape. I was initially happy with the excellent accuracy when the drawing was actually a rectangle, triangle or ellipse. But when testing internally with [Mix on Pix](https://apps.apple.com/us/app/mix-on-pix-text-on-photos/id633281586), drawings of shapes like stars, hearts or crosses would always be recognized as one of Ellipse, Rectangle or Triangle. It is not a great user experience.\nSo the shape of type Other solves that.\n\n---\nFrancois Robert",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "earth and nature",
    "health",
    "computer vision",
    "classification",
    "deep learning",
    "image",
    "regression"
  ],
  "licenses": [
    {
      "nameNullable": "Attribution 4.0 International (CC BY 4.0)",
      "name": "Attribution 4.0 International (CC BY 4.0)",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}