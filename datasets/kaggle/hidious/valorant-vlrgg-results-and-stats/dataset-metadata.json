{
  "id": "hidious/valorant-vlrgg-results-and-stats",
  "id_no": 1816766,
  "datasetSlugNullable": "valorant-vlrgg-results-and-stats",
  "ownerUserNullable": "hidious",
  "usabilityRatingNullable": 0.9411764705882353,
  "titleNullable": "Valorant vlr.gg Results and Stats ",
  "subtitleNullable": "Match results and player stats scraped from vlr.gg",
  "descriptionNullable": "## Context\n\nValorant is a tactical first-person shooter game developed by Riot Games that was officially release on June 2, 2020. A month after their release, Riot Games also released a Valorant API, which was given out to only a number of product developers, and most data is not publicly accessible. However, we do still have a way to obtain data from official matches, and that is from vlr.gg, a website that logs official matches and players stats, by scraping data off their pages. Please be aware that this is data scraped from the vlr.gg website using an Unofficial API created by the community and not using Riot Games' API.\n\n## Content\n\nThe dataset consists of data from the match results and player stats from vlr.gg scraped on December 24, 2021. The oldest match data that was able to be scraped successfully was on June 14, 2020. The original API created can be found [here](https://github.com/axsddlr/vlrggapi), while my edited version can be found [here](https://github.com/fnurrahmadi/data-science-portfolio/tree/main/vlrgg%20Unofficial%20REST%20API%20-%20updated). Make sure to check the rows for faulty data and missing values -- I am 100% sure that you should be able to find some.\n\nMatch results and player stats in this data set are as such:\n\n### Match Results (results.csv):\n\nI feel the need to mention that if a match is a bo1, the score will be the number of rounds won (eg 13-11), however, if it the match is not a bo1 but a series of maps (eg bo2, bo3, bo5) then it shows as the number of maps won (eg 2 - 1).\n\n- team1 = name of team 1\n- team2 = name of team 2\n- score1 = score of team 1\n- score2 = score of team 2\n- time_completed = interval time between match time and date and scraping time and date\n- round_info = round of the tournament ie group stage of which group of tournament\\_name\n- tournament_name = name of tournament in which the match was played\n- match_page = subset of link to the match page\n- tournament_icon = link to the tournament icon\n\n### Player Stats (stats.csv):\n\nPlease be aware that the player stats are obtained per region, per map, then per agent, in that specific order. That means all of the stats below are per map per agent, ie kill_deaths means ratio of kills per map per agent. In the future, the stats could also be scraped per event series, per event name, and per event stage, but they're listed as IDs so it would take quite some time to label them accordingly.\n\n- player = player name\n- org = current organization\n- rds = total rounds played\n- average\\_combat_score = overall average combat score (combat score can be calculated [as such](https://www.reddit.com/r/VALORANT/comments/fz4hmc/any_idea_on_how_the_combat_score_works/fn30j6o/))\n- kill_deaths = ratio of kill deaths\n- average_damage\\_per\\_round = average damage per round\n- kills_per\\_round = kills per round\n- assists_per\\_round = assists per round\n- first_kills\\_per\\_round = first kills per round\n- first_deaths\\_per\\_round = first deaths per round\n- headshot_percentage = overall headshot percentage\n- clutch\\_success_percentage = ratio of clutch wins over total clutch situations played\n- clutch (won/played) = number of clutches won over number of clutch situations played\n- total_kills = total number of kills\n- total_deaths = total number of deaths\n- total_assists = total number of assists\n- total\\_first_kills = total number of first kills\n- total\\_first_deaths = total number of first deaths\n- map_id = ID of the map played ('1': bind, '2': haven, '3': split, '5': ascent, '6': icebox, '8': breeze, '9': fracture)\n- agent = name of the agent played\n- region = region in which the player plays\n\n## Acknowledgements\n\nCredits to the original creators of the API [here](https://github.com/axsddlr/vlrggapi). I only managed to add in a few things to get some more data and fix a little bit here and there as the vlr.gg pages seemed to have been updated since the API was created. Give all the props to them \ud83d\udc4f \n\n## Inspiration\n\nShow us creative analytics such as, which agent gets the most first kills in a particular map, which map has the highest average total kills, which agent produces the highest average assists (and if decreases or increases across all maps), etc. As for predictive analysis, perhaps you can segment players based on their stats into clusters such as player roles or tiers, or predict which agents or which class list (sentinels, duelist, smokers, etc) do these players play based on stats. Have fun being creative \ud83d\udcaf ",
  "datasetId": 1816766,
  "datasetSlug": "valorant-vlrgg-results-and-stats",
  "hasDatasetSlug": true,
  "ownerUser": "hidious",
  "hasOwnerUser": true,
  "usabilityRating": 0.9411764705882353,
  "hasUsabilityRating": true,
  "totalViews": 8481,
  "totalVotes": 10,
  "totalDownloads": 242,
  "title": "Valorant vlr.gg Results and Stats ",
  "hasTitle": true,
  "subtitle": "Match results and player stats scraped from vlr.gg",
  "hasSubtitle": true,
  "description": "## Context\n\nValorant is a tactical first-person shooter game developed by Riot Games that was officially release on June 2, 2020. A month after their release, Riot Games also released a Valorant API, which was given out to only a number of product developers, and most data is not publicly accessible. However, we do still have a way to obtain data from official matches, and that is from vlr.gg, a website that logs official matches and players stats, by scraping data off their pages. Please be aware that this is data scraped from the vlr.gg website using an Unofficial API created by the community and not using Riot Games' API.\n\n## Content\n\nThe dataset consists of data from the match results and player stats from vlr.gg scraped on December 24, 2021. The oldest match data that was able to be scraped successfully was on June 14, 2020. The original API created can be found [here](https://github.com/axsddlr/vlrggapi), while my edited version can be found [here](https://github.com/fnurrahmadi/data-science-portfolio/tree/main/vlrgg%20Unofficial%20REST%20API%20-%20updated). Make sure to check the rows for faulty data and missing values -- I am 100% sure that you should be able to find some.\n\nMatch results and player stats in this data set are as such:\n\n### Match Results (results.csv):\n\nI feel the need to mention that if a match is a bo1, the score will be the number of rounds won (eg 13-11), however, if it the match is not a bo1 but a series of maps (eg bo2, bo3, bo5) then it shows as the number of maps won (eg 2 - 1).\n\n- team1 = name of team 1\n- team2 = name of team 2\n- score1 = score of team 1\n- score2 = score of team 2\n- time_completed = interval time between match time and date and scraping time and date\n- round_info = round of the tournament ie group stage of which group of tournament\\_name\n- tournament_name = name of tournament in which the match was played\n- match_page = subset of link to the match page\n- tournament_icon = link to the tournament icon\n\n### Player Stats (stats.csv):\n\nPlease be aware that the player stats are obtained per region, per map, then per agent, in that specific order. That means all of the stats below are per map per agent, ie kill_deaths means ratio of kills per map per agent. In the future, the stats could also be scraped per event series, per event name, and per event stage, but they're listed as IDs so it would take quite some time to label them accordingly.\n\n- player = player name\n- org = current organization\n- rds = total rounds played\n- average\\_combat_score = overall average combat score (combat score can be calculated [as such](https://www.reddit.com/r/VALORANT/comments/fz4hmc/any_idea_on_how_the_combat_score_works/fn30j6o/))\n- kill_deaths = ratio of kill deaths\n- average_damage\\_per\\_round = average damage per round\n- kills_per\\_round = kills per round\n- assists_per\\_round = assists per round\n- first_kills\\_per\\_round = first kills per round\n- first_deaths\\_per\\_round = first deaths per round\n- headshot_percentage = overall headshot percentage\n- clutch\\_success_percentage = ratio of clutch wins over total clutch situations played\n- clutch (won/played) = number of clutches won over number of clutch situations played\n- total_kills = total number of kills\n- total_deaths = total number of deaths\n- total_assists = total number of assists\n- total\\_first_kills = total number of first kills\n- total\\_first_deaths = total number of first deaths\n- map_id = ID of the map played ('1': bind, '2': haven, '3': split, '5': ascent, '6': icebox, '8': breeze, '9': fracture)\n- agent = name of the agent played\n- region = region in which the player plays\n\n## Acknowledgements\n\nCredits to the original creators of the API [here](https://github.com/axsddlr/vlrggapi). I only managed to add in a few things to get some more data and fix a little bit here and there as the vlr.gg pages seemed to have been updated since the API was created. Give all the props to them \ud83d\udc4f \n\n## Inspiration\n\nShow us creative analytics such as, which agent gets the most first kills in a particular map, which map has the highest average total kills, which agent produces the highest average assists (and if decreases or increases across all maps), etc. As for predictive analysis, perhaps you can segment players based on their stats into clusters such as player roles or tiers, or predict which agents or which class list (sentinels, duelist, smokers, etc) do these players play based on stats. Have fun being creative \ud83d\udcaf ",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "games",
    "video games",
    "sports"
  ],
  "licenses": [
    {
      "nameNullable": "copyright-authors",
      "name": "copyright-authors",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}