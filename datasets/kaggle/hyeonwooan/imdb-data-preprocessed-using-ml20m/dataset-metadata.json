{
  "id": "hyeonwooan/imdb-data-preprocessed-using-ml20m",
  "id_no": 1985036,
  "datasetSlugNullable": "imdb-data-preprocessed-using-ml20m",
  "ownerUserNullable": "hyeonwooan",
  "usabilityRatingNullable": 0.8823529411764706,
  "titleNullable": "IMDB data preprocessed using ml-20m",
  "subtitleNullable": "the preprocessed data for a recommendation system",
  "descriptionNullable": "### Context\nIt is data processed to make a movie recommendation system.\n\nAbout 90,000 movie data of IMDB and rating data of Movielens (ml-20m) were used, and actors and directors' features were extracted using Matrix Factorization based on user's rating. Also, in the case of the story, the names of people who can adversely affect the sentence analysis were removed using the pre-trained BERT model and only the noun words were left.\n\nHowever, before using the data, please consider the fact that a lot of the intuition of the author is included.\n\n### Content\nimdb\\_data.csv : \n  - Data scrapping from the IMDB site around April 2020.\n  - There are 91,515 target films.\n  - The preprocessed data(columns) is as follows.\n    + story : Eliminates adverse effects on technologies such as TF-IDF by removing person names using BERT and leaving only nouns.\n    + actors : To convert to a lower case and remove data polarization between films, only four main characters (mainly listed in sequence) were left.\n    + genre : Similar to actors, if you include multiple genres, only allow up to 3 genres to be included.\n    + actors\\_order : The indices of each actors in actors\\_vectors that result from Matrix Factorization. It is configured to be the same as the order written in actors.\n    + directors\\_order : Indices of each director in directors\\_vectors resulting from Matrix Factorization.\n    + popularity : Normalized value from 0 to 1 based on ranking according to votes by year.\n\nactors\\_vectors*.p, directors\\_vectors*.p : \n  - Vectors created using truncated SVD for each actor and director based on imdb data and rating data.\n  - The suffix of the file, such as \"\\_10, \\_20, ...\", indicates how many rating data for each user was used. For example, \"\\_10\" is a vector created using 10 rating data for each user.\n  - In the case of a file without a suffix, it is a vector generated by random numbers.\n  - If there is no evaluation for actors or directors, the average of all vectors with evaluation is substituted.\n\nimdb\\_rating\\_with\\_ml20.csv : \n  - Among the rating data of ml-20m, only the data of movies included in imdb\\_data.csv is filtered and imdb\\_id is added.\n  - [imdb_metadata](https://www.kaggle.com/rounakbanik/movie-recommender-systems/data?select=movies_metadata.csv) was used to join the two.\n\n### Acknowledgements\nMovieLens : It shares a lot of explicit feedback data about movies and plays a very key role in data processing and recommendation systems.\n - https://grouplens.org/datasets/movielens/20m/\n\nIMDB : A site where you can refer to a lot of information about movies. Many parts of the recommendation system were helped.\n - https://www.imdb.com/\n\nBERT : Helps remove person names from stories in IMDB data and stemming sentences.\n - https://github.com/kamalkraj/BERT-NER\n\nmovies\\_metadata : Played an important role in combining MovieLens' movie's ID with IMDB's movie's ID.\n - https://www.kaggle.com/rounakbanik/movie-recommender-systems/data?select=movies\\_metadata.csv\n\n### Inspiration\n  - You can try building a recommender system.\n\n### Dataset License\n - [IMDB License](https://www.imdb.com/conditions?ref_=helpms_ih_gi_usedata)\n - [Movielens License](https://files.grouplens.org/datasets/movielens/ml-25m-README.html)",
  "datasetId": 1985036,
  "datasetSlug": "imdb-data-preprocessed-using-ml20m",
  "hasDatasetSlug": true,
  "ownerUser": "hyeonwooan",
  "hasOwnerUser": true,
  "usabilityRating": 0.8823529411764706,
  "hasUsabilityRating": true,
  "totalViews": 3052,
  "totalVotes": 14,
  "totalDownloads": 256,
  "title": "IMDB data preprocessed using ml-20m",
  "hasTitle": true,
  "subtitle": "the preprocessed data for a recommendation system",
  "hasSubtitle": true,
  "description": "### Context\nIt is data processed to make a movie recommendation system.\n\nAbout 90,000 movie data of IMDB and rating data of Movielens (ml-20m) were used, and actors and directors' features were extracted using Matrix Factorization based on user's rating. Also, in the case of the story, the names of people who can adversely affect the sentence analysis were removed using the pre-trained BERT model and only the noun words were left.\n\nHowever, before using the data, please consider the fact that a lot of the intuition of the author is included.\n\n### Content\nimdb\\_data.csv : \n  - Data scrapping from the IMDB site around April 2020.\n  - There are 91,515 target films.\n  - The preprocessed data(columns) is as follows.\n    + story : Eliminates adverse effects on technologies such as TF-IDF by removing person names using BERT and leaving only nouns.\n    + actors : To convert to a lower case and remove data polarization between films, only four main characters (mainly listed in sequence) were left.\n    + genre : Similar to actors, if you include multiple genres, only allow up to 3 genres to be included.\n    + actors\\_order : The indices of each actors in actors\\_vectors that result from Matrix Factorization. It is configured to be the same as the order written in actors.\n    + directors\\_order : Indices of each director in directors\\_vectors resulting from Matrix Factorization.\n    + popularity : Normalized value from 0 to 1 based on ranking according to votes by year.\n\nactors\\_vectors*.p, directors\\_vectors*.p : \n  - Vectors created using truncated SVD for each actor and director based on imdb data and rating data.\n  - The suffix of the file, such as \"\\_10, \\_20, ...\", indicates how many rating data for each user was used. For example, \"\\_10\" is a vector created using 10 rating data for each user.\n  - In the case of a file without a suffix, it is a vector generated by random numbers.\n  - If there is no evaluation for actors or directors, the average of all vectors with evaluation is substituted.\n\nimdb\\_rating\\_with\\_ml20.csv : \n  - Among the rating data of ml-20m, only the data of movies included in imdb\\_data.csv is filtered and imdb\\_id is added.\n  - [imdb_metadata](https://www.kaggle.com/rounakbanik/movie-recommender-systems/data?select=movies_metadata.csv) was used to join the two.\n\n### Acknowledgements\nMovieLens : It shares a lot of explicit feedback data about movies and plays a very key role in data processing and recommendation systems.\n - https://grouplens.org/datasets/movielens/20m/\n\nIMDB : A site where you can refer to a lot of information about movies. Many parts of the recommendation system were helped.\n - https://www.imdb.com/\n\nBERT : Helps remove person names from stories in IMDB data and stemming sentences.\n - https://github.com/kamalkraj/BERT-NER\n\nmovies\\_metadata : Played an important role in combining MovieLens' movie's ID with IMDB's movie's ID.\n - https://www.kaggle.com/rounakbanik/movie-recommender-systems/data?select=movies\\_metadata.csv\n\n### Inspiration\n  - You can try building a recommender system.\n\n### Dataset License\n - [IMDB License](https://www.imdb.com/conditions?ref_=helpms_ih_gi_usedata)\n - [Movielens License](https://files.grouplens.org/datasets/movielens/ml-25m-README.html)",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "arts and entertainment",
    "movies and tv shows",
    "recommender systems"
  ],
  "licenses": [
    {
      "nameNullable": "other",
      "name": "other",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}