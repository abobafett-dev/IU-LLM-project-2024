{
  "id": "johoetter/is-this-sentence-completed",
  "id_no": 1740781,
  "datasetSlugNullable": "is-this-sentence-completed",
  "ownerUserNullable": "johoetter",
  "usabilityRatingNullable": 1.0,
  "titleNullable": "Is this sentence completed?",
  "subtitleNullable": "Classify whether a sentence has been finished or not",
  "descriptionNullable": "### Context\n\nPredicting whether a sentence is finished or not is one of the most high-level classifications that NLP offers. If implemented, it can help e.g. to detect sentences that users forgot to finish, or that leave too much room for interpretation. In many applications, this can help tremendously to clean your text data.\n\nWith this dataset, you can build a classification model for such a task.\n\n### Content\n\nEach item consists of a sentence and its target `is_finished`. Your goal is to predict whether a sentence is finished or not, e.g.:\n- `finished`: \"Kaggle is such a great platform, where Data Scientists from all over the world can share their ideas and data!\"\n- `not finished`: \"I believe that we should just\" [... just what?]\n\nThe data is collected from various news headlines. The labeling is `weakly supervised` using our labeling software [onetask](https://www.onetask.ai/), i.e. we labeled the data both programmatically using labeling functions (e.g. dependency parsers etc.) as well as manually.\n\n### Acknowledgements\n\nThanks to my colleague Henrik Wenck, who provided me with the idea to publish this task on Kaggle \ud83d\ude4f \n\n### Inspiration\n\nLet's build and discuss ideas! From my point of view, this task can be solved e.g.\n- parsing text using linguistic algorithms, to detect e.g. dependencies within the text that indicate whether a sentence is finished or not\n- using a recurrent architecture like RNNs\n- using vanilla algorithms with fine-tuned embeddings, representing the context of a sentence",
  "datasetId": 1740781,
  "datasetSlug": "is-this-sentence-completed",
  "hasDatasetSlug": true,
  "ownerUser": "johoetter",
  "hasOwnerUser": true,
  "usabilityRating": 1.0,
  "hasUsabilityRating": true,
  "totalViews": 2944,
  "totalVotes": 12,
  "totalDownloads": 189,
  "title": "Is this sentence completed?",
  "hasTitle": true,
  "subtitle": "Classify whether a sentence has been finished or not",
  "hasSubtitle": true,
  "description": "### Context\n\nPredicting whether a sentence is finished or not is one of the most high-level classifications that NLP offers. If implemented, it can help e.g. to detect sentences that users forgot to finish, or that leave too much room for interpretation. In many applications, this can help tremendously to clean your text data.\n\nWith this dataset, you can build a classification model for such a task.\n\n### Content\n\nEach item consists of a sentence and its target `is_finished`. Your goal is to predict whether a sentence is finished or not, e.g.:\n- `finished`: \"Kaggle is such a great platform, where Data Scientists from all over the world can share their ideas and data!\"\n- `not finished`: \"I believe that we should just\" [... just what?]\n\nThe data is collected from various news headlines. The labeling is `weakly supervised` using our labeling software [onetask](https://www.onetask.ai/), i.e. we labeled the data both programmatically using labeling functions (e.g. dependency parsers etc.) as well as manually.\n\n### Acknowledgements\n\nThanks to my colleague Henrik Wenck, who provided me with the idea to publish this task on Kaggle \ud83d\ude4f \n\n### Inspiration\n\nLet's build and discuss ideas! From my point of view, this task can be solved e.g.\n- parsing text using linguistic algorithms, to detect e.g. dependencies within the text that indicate whether a sentence is finished or not\n- using a recurrent architecture like RNNs\n- using vanilla algorithms with fine-tuned embeddings, representing the context of a sentence",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "linguistics",
    "intermediate",
    "text",
    "binary classification",
    "news"
  ],
  "licenses": [
    {
      "nameNullable": "CC0-1.0",
      "name": "CC0-1.0",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}