{
  "id": "mcfurland/10-m-beatport-tracks-spotify-audio-features",
  "id_no": 3616377,
  "datasetSlugNullable": "10-m-beatport-tracks-spotify-audio-features",
  "ownerUserNullable": "mcfurland",
  "usabilityRatingNullable": 1.0,
  "titleNullable": "10+ M. Beatport Tracks / Spotify Audio Features",
  "subtitleNullable": "Full Beatport DB -- 4.7M Spotify Audio Features (updated 9/19/23)",
  "descriptionNullable": "### All Spotify data retrieved through API. \n\n### Replicate my database by visiting my [Github](https://github.com/mcfurland/everybeat) repo  \n&nbsp;\n\n**Download images relating to release, label & artist at** [https://www.kaggle.com/datasets/mcfurland/10-m-beatport-tracks-all-images](url)\n\n- Beatport tables prefixed with **`bp_`**\n- Spotify tables prefixed with **`sp_`**\n- Match Spotify Audio features to Beatport tracks by joining the two dataframes/tables on **`isrc`**\n- **Any feedback on my repo or dataset so that I can improve would be greatly appreciated.**\n***\n\nSpotify typically caps # of API calls per 24 hours to 10k. To maximize number of requests I have used the following workflow:\n\n\n**1) Run my reverse_isrc Scrapy spider found in my [Github](https://github.com/mcfurland/everybeat).**\n- selects isrc from database\n- group by distinct release_id, order by count (descending) in each group\n- this gives us the releases with the most tracks in each group\n- send POST requests to https://www.isrcfinder.com/reverse-lookup/ using that isrc to find the associated spotify album id\n- write data to separate database table  \n\n\n**2) Send API calls to Spotify using Spotipy (endpoint album)**\n- this gets all tracks associated with release/albums from step 1\n- write data to database  \n\n\n**3) Run isrc Scrapy spider.**\n- Uses all of the spotify track id from step 2\n- sends POST requests to https://www.isrcfinder.com to retrieve that track's isrc  \n\n\n**4) Send API calls to Spotify using Spotipy (endpoint audio features)**\n- select all distinct isrc from step 3 that match an isrc from beatport database.\n- request audio features using track_id from those matched isrc in batches of 50.  \n\n\n**5) Repeat steps 2-4 until initial releases from step 1 have been completed.**  \n&nbsp;\n\n**Considerations:** \n\n- Free VPN was used through Windscribe. \n- 6 separate email accounts were used to create 6 Spotify developer accounts.\n- When creating a new account make sure you are using an incognito browser with VPN enabled so that accounts don't get linked\n- Write down the VPN location you plan on using for each account and use that location each time.\n- Never be signed in to 2 accounts simultaneously\n- Before switching to a new account, delete cache file created when running Spotipy\n***\n\n**Context:**\nElectronic music, with its broad range of genres and styles, plays an essential role in today's musical culture. Classifying these genres, however, is a nuanced and often subjective endeavor. This dataset, 10+ M. Beatport Tracks / Spotify Audio Features, is assembled to support machine learning and deep learning efforts in tackling electronic music genre classification.\n***\n\n**Sources:**\nThe dataset comprises over 10 million songs and related data such as artists, labels, and releases, structured in a typical relational format. This data has been carefully scraped from Beatport, a renowned online music store specializing in electronic music. The project, utilizing tools such as **Postgres**, **Scrapy**, **Apache Airflow**, and **Docker**, has resulted in creating a self-maintaining database to ensure data quality.\n***\n\n**Inspiration:**\nThe driving force behind this dataset comes from a love of electronic music and a commitment to expanding access to this type of data. By offering comprehensive information on electronic tracks, releases, artists, and labels, this dataset serves as a starting point for those who share a passion for electronic music and wish to embark on a journey of data exploration and innovation.\n***\n\n**What's Next:**\nThe dataset represents merely the initial phase of an ongoing endeavor to deepen the connection between electronic music and deep learning. Upcoming enhancements include the integration of waveforms, spectrogram images, and visual content related to artists, releases, and labels. These additions are designed to provide richer features for deep learning models in music classification. The inclusion of Spotify audio features, combined with the potential for cross-database linking via ISRC with platforms like Musicbrainz and Discogs, will further enrich the dataset. Further feature engineering will take place to provide accessibility to a wide swath of data, designed to allow others to jump straight into data exploration rather than data collection.",
  "datasetId": 3616377,
  "datasetSlug": "10-m-beatport-tracks-spotify-audio-features",
  "hasDatasetSlug": true,
  "ownerUser": "mcfurland",
  "hasOwnerUser": true,
  "usabilityRating": 1.0,
  "hasUsabilityRating": true,
  "totalViews": 6971,
  "totalVotes": 39,
  "totalDownloads": 1145,
  "title": "10+ M. Beatport Tracks / Spotify Audio Features",
  "hasTitle": true,
  "subtitle": "Full Beatport DB -- 4.7M Spotify Audio Features (updated 9/19/23)",
  "hasSubtitle": true,
  "description": "### All Spotify data retrieved through API. \n\n### Replicate my database by visiting my [Github](https://github.com/mcfurland/everybeat) repo  \n&nbsp;\n\n**Download images relating to release, label & artist at** [https://www.kaggle.com/datasets/mcfurland/10-m-beatport-tracks-all-images](url)\n\n- Beatport tables prefixed with **`bp_`**\n- Spotify tables prefixed with **`sp_`**\n- Match Spotify Audio features to Beatport tracks by joining the two dataframes/tables on **`isrc`**\n- **Any feedback on my repo or dataset so that I can improve would be greatly appreciated.**\n***\n\nSpotify typically caps # of API calls per 24 hours to 10k. To maximize number of requests I have used the following workflow:\n\n\n**1) Run my reverse_isrc Scrapy spider found in my [Github](https://github.com/mcfurland/everybeat).**\n- selects isrc from database\n- group by distinct release_id, order by count (descending) in each group\n- this gives us the releases with the most tracks in each group\n- send POST requests to https://www.isrcfinder.com/reverse-lookup/ using that isrc to find the associated spotify album id\n- write data to separate database table  \n\n\n**2) Send API calls to Spotify using Spotipy (endpoint album)**\n- this gets all tracks associated with release/albums from step 1\n- write data to database  \n\n\n**3) Run isrc Scrapy spider.**\n- Uses all of the spotify track id from step 2\n- sends POST requests to https://www.isrcfinder.com to retrieve that track's isrc  \n\n\n**4) Send API calls to Spotify using Spotipy (endpoint audio features)**\n- select all distinct isrc from step 3 that match an isrc from beatport database.\n- request audio features using track_id from those matched isrc in batches of 50.  \n\n\n**5) Repeat steps 2-4 until initial releases from step 1 have been completed.**  \n&nbsp;\n\n**Considerations:** \n\n- Free VPN was used through Windscribe. \n- 6 separate email accounts were used to create 6 Spotify developer accounts.\n- When creating a new account make sure you are using an incognito browser with VPN enabled so that accounts don't get linked\n- Write down the VPN location you plan on using for each account and use that location each time.\n- Never be signed in to 2 accounts simultaneously\n- Before switching to a new account, delete cache file created when running Spotipy\n***\n\n**Context:**\nElectronic music, with its broad range of genres and styles, plays an essential role in today's musical culture. Classifying these genres, however, is a nuanced and often subjective endeavor. This dataset, 10+ M. Beatport Tracks / Spotify Audio Features, is assembled to support machine learning and deep learning efforts in tackling electronic music genre classification.\n***\n\n**Sources:**\nThe dataset comprises over 10 million songs and related data such as artists, labels, and releases, structured in a typical relational format. This data has been carefully scraped from Beatport, a renowned online music store specializing in electronic music. The project, utilizing tools such as **Postgres**, **Scrapy**, **Apache Airflow**, and **Docker**, has resulted in creating a self-maintaining database to ensure data quality.\n***\n\n**Inspiration:**\nThe driving force behind this dataset comes from a love of electronic music and a commitment to expanding access to this type of data. By offering comprehensive information on electronic tracks, releases, artists, and labels, this dataset serves as a starting point for those who share a passion for electronic music and wish to embark on a journey of data exploration and innovation.\n***\n\n**What's Next:**\nThe dataset represents merely the initial phase of an ongoing endeavor to deepen the connection between electronic music and deep learning. Upcoming enhancements include the integration of waveforms, spectrogram images, and visual content related to artists, releases, and labels. These additions are designed to provide richer features for deep learning models in music classification. The inclusion of Spotify audio features, combined with the potential for cross-database linking via ISRC with platforms like Musicbrainz and Discogs, will further enrich the dataset. Further feature engineering will take place to provide accessibility to a wide swath of data, designed to allow others to jump straight into data exploration rather than data collection.",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "arts and entertainment",
    "music",
    "classification",
    "deep learning",
    "tabular",
    "image"
  ],
  "licenses": [
    {
      "nameNullable": "ODbL-1.0",
      "name": "ODbL-1.0",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}