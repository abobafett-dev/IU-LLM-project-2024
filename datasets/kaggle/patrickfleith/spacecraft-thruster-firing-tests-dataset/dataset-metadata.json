{
  "id": "patrickfleith/spacecraft-thruster-firing-tests-dataset",
  "id_no": 2551817,
  "datasetSlugNullable": "spacecraft-thruster-firing-tests-dataset",
  "ownerUserNullable": "patrickfleith",
  "usabilityRatingNullable": 1.0,
  "titleNullable": "Spacecraft Thruster Firing Tests Dataset",
  "subtitleNullable": "Can you model the performances of rocket engines and detect anomalies?",
  "descriptionNullable": "# Warning - Anomalies currently not usable\nI notice there are some problems with the anomalous sequences. Please do not consider using the dataset with the firing sequence marked as anomalous. I am investigating what is the problem and work towards a new release. I recommend to not use this dataset for anomaly detection at the moment.\n\n# Context\n\nTesting hardware to qualify it for Spaceflight is critical to model and verify performances. Hot fire tests (also known as life-tests) are typically run during the qualification campaigns of satellite thrusters, but results remain proprietary data, hence making it difficult for the machine learning community to develop suitable data-driven predictive models. This synthetic dataset was generated partially based on the real-world physics of monopropellant chemical thrusters, to foster the development and benchmarking of new data-driven analytical methods (machine learning, deep-learning, etc.).\n\n# Overview of chemical monopropellant thruster\n\nA monopropellant thruster is an engine that provide thrust by usage a unique propellant, as opposed to bipropellant systems which uses the combustion of fuel and oxidizer. The unique propellant flow into the chamber is controlled by a valve, usually an integral part of the thruster. It is injected into a catalyst bed, where it decomposes. A monopropellant must be slightly unstable chemical, which will decompose exothermally to produce a hot gas. The resulting hot gases are expelled through a converging/diverging nozzle generating thrust. The gas temperature is high which require the usage of high-temperature alloys to manufacture the nozzle.\n\nThe most classical type of monopropellant thrusters are reaction control thrusters generating about 1 to 10 Newton of thrust using hydrazine as propellant. These reaction control thrusters are used, for instance to control the attitude of a spacecraft and/or to desaturate the reaction wheels.\n\nThe performance of a monopropellant thruster (and its degradation) is mostly driven by the valve performance and the s of the catalyst bed on which the propellant decomposes. The life of the catalyst bed is mainly affected by the degradation of catalyst granules. The catalyst is made of alumina-based Indium metal granules (about 1mm in diameter) that are carefully designed and selected to optimize its lifetime. However, catalyst granules are easily damaged by thermoelastic shocks, collisions with other granules, and so on, thus hey are broken up into fine particles which reduces their efficiency. After the long duration of firing, large voids are formed in the catalyst bed and induce unstable decomposition of hydrazine and degradation of thruster performance.\n\nThe properties of this simulated thruster fire tests are fictious and not necessarily equivalent to a real-world thruster available on the market. Nevertheless, it provides sufficient granularity and challenge to benchmark algorithm that may then be tested on real fire test sequences. This is possible because the simulator is based, partially, on real-world physics of such reaction control thrusters. The details of the simulator are not provided on purpose to avoid leakage into feature engineering methods and modelling approaches developed.\n\n# Tasks and use cases\n### Regression for Performance Prediction\n- **Performance Modelling**: Prediction of the thruster performances (target can be thrust, mass flow rate, and/or the average specific impulse of over a given sequence that can be calculated using the first two). This task may also be referred to as \u201ctime seriesforecasting with exogenous inputs\u201d, or \u201cSystem Dynamics modelling with control\u201d, where the control is the command sent to the thruster (on/off) in the column \u201cton\u201d. It is very unlikely in practice to have more than a few complete SN qualification datasets, so we suggest a 50:50 split between the train and test sets.\n    - Use SN01 to SN12 to build your train and validation sets. These are data assumed to be collected on-ground.\n    - Use SN13 to SN24 as the final test set. Warning: given that these thrusters are expected to be mounted on a flying satellite, you cannot retrain the model progressively using SN13 to SN24 data. The data is the ground truth as if we were able to measure it on-board.\n- Acceptance Test for Individualised Performance Model refinement:\n    - In practice, every newly manufactured thruster is tested via acceptance tests: test_id 1 to 12. So these measurement are actually available for each thruster serial number. For this reason, it is possible to use the acceptance test data (test_id 1 to 12) of SN13 to SN24 as input to the model to predict the flight performance of these SN over test_id 13 to 112. Taking into account the acceptance test of individual thruster might be helpful to generate individualized thruster predictive model. This use case propose to investigate the differences between a one-model-for-all approach or a one-model-for-one-thruster approach.\n\n- Uncertainty Quantification:\n    - Thruster-to-thruster reproducibility verification, i.e. to evaluate the prediction variability between several thrusters in order to construct uncertainty bounds around the prediction (predictive intervals) of the thrust and mass flow rate of future thrusters that may be used during an actual space mission. Use SN01 to SN12 for training and validation, and SN13 to SN24 for test set. The train/val set fraction is lower than in conventional ML settings to mimic real industrial constraints (only a few thrusters fully tested, most of them are flying). The train set is here to generate prediction interval, and the test set (SN13 to SN24) can be used to verify the expected coverage of the predictive interval. As for the regression use case, it may be of interest to include acceptance test data as input data to predict to build and refine predictive intervals and better estimate the per-thruster uncertainties.\n\n### Anomaly, Novelty, and Outlier Detection\nAnomalies can be detected in an unsupervised setting (outlier detection) or in a semi-supervised setting (novelty detection). The dataset includes a total of 270 anomalies.\n- Outlier is an observation which deviates from other observations (abnormal observation). This is an unsupervised learning approach where no labels are provided but the algorithm tries to find the datapoints which do not conform to the majority of the observations.\n- Novelty is an observation which deviates from known normal observations. This is a semi-supervised learning approach: in this scenario the algorithm learns from known nominal data pattern (that have been labelled), or using inliers of an outliers detection system), and flags new observations that deviate significantly from known nominal patterns.\n- There are many ways this dataset can be used to benchmark anomaly detection systems:\n- **Simple approach**: predict if a firing test sequence, given all columns except \u201cvl\u201d and \u201canomaly code\u201d is anomalous, i.e. the corresponding metadata.csv anomalous flag is *True*. A firing sequence is labelled anomalous in the metadata, even if only a few seconds of the time series is anomalous. This a simple yet more practical approach to implement. Traditional metrics such as precision, recall and f1-score can be used to report the anomaly detection performances.\n- **Advanced approach**: each firing sequence (time series) comes with an \u201canomaly_code\u201d column which takes value \u201c0\u201d if it is nominal, or another value (see anomaly codes description) if \u201canomalous\u201d. It flags for each point in the time series if there is an anomaly or not. It is useful for anomaly detection system that try to predict which portion of a time series is anomalous. Suitable metrics to evaluate the anomaly detection system may be mean intersect over union (IoU) or the Dice Coefficient as the problem is reduced to a segmentation problem where the model is asked to segment the time series into nominal and anomalous portions.\n\n",
  "datasetId": 2551817,
  "datasetSlug": "spacecraft-thruster-firing-tests-dataset",
  "hasDatasetSlug": true,
  "ownerUser": "patrickfleith",
  "hasOwnerUser": true,
  "usabilityRating": 1.0,
  "hasUsabilityRating": true,
  "totalViews": 4962,
  "totalVotes": 26,
  "totalDownloads": 355,
  "title": "Spacecraft Thruster Firing Tests Dataset",
  "hasTitle": true,
  "subtitle": "Can you model the performances of rocket engines and detect anomalies?",
  "hasSubtitle": true,
  "description": "# Warning - Anomalies currently not usable\nI notice there are some problems with the anomalous sequences. Please do not consider using the dataset with the firing sequence marked as anomalous. I am investigating what is the problem and work towards a new release. I recommend to not use this dataset for anomaly detection at the moment.\n\n# Context\n\nTesting hardware to qualify it for Spaceflight is critical to model and verify performances. Hot fire tests (also known as life-tests) are typically run during the qualification campaigns of satellite thrusters, but results remain proprietary data, hence making it difficult for the machine learning community to develop suitable data-driven predictive models. This synthetic dataset was generated partially based on the real-world physics of monopropellant chemical thrusters, to foster the development and benchmarking of new data-driven analytical methods (machine learning, deep-learning, etc.).\n\n# Overview of chemical monopropellant thruster\n\nA monopropellant thruster is an engine that provide thrust by usage a unique propellant, as opposed to bipropellant systems which uses the combustion of fuel and oxidizer. The unique propellant flow into the chamber is controlled by a valve, usually an integral part of the thruster. It is injected into a catalyst bed, where it decomposes. A monopropellant must be slightly unstable chemical, which will decompose exothermally to produce a hot gas. The resulting hot gases are expelled through a converging/diverging nozzle generating thrust. The gas temperature is high which require the usage of high-temperature alloys to manufacture the nozzle.\n\nThe most classical type of monopropellant thrusters are reaction control thrusters generating about 1 to 10 Newton of thrust using hydrazine as propellant. These reaction control thrusters are used, for instance to control the attitude of a spacecraft and/or to desaturate the reaction wheels.\n\nThe performance of a monopropellant thruster (and its degradation) is mostly driven by the valve performance and the s of the catalyst bed on which the propellant decomposes. The life of the catalyst bed is mainly affected by the degradation of catalyst granules. The catalyst is made of alumina-based Indium metal granules (about 1mm in diameter) that are carefully designed and selected to optimize its lifetime. However, catalyst granules are easily damaged by thermoelastic shocks, collisions with other granules, and so on, thus hey are broken up into fine particles which reduces their efficiency. After the long duration of firing, large voids are formed in the catalyst bed and induce unstable decomposition of hydrazine and degradation of thruster performance.\n\nThe properties of this simulated thruster fire tests are fictious and not necessarily equivalent to a real-world thruster available on the market. Nevertheless, it provides sufficient granularity and challenge to benchmark algorithm that may then be tested on real fire test sequences. This is possible because the simulator is based, partially, on real-world physics of such reaction control thrusters. The details of the simulator are not provided on purpose to avoid leakage into feature engineering methods and modelling approaches developed.\n\n# Tasks and use cases\n### Regression for Performance Prediction\n- **Performance Modelling**: Prediction of the thruster performances (target can be thrust, mass flow rate, and/or the average specific impulse of over a given sequence that can be calculated using the first two). This task may also be referred to as \u201ctime seriesforecasting with exogenous inputs\u201d, or \u201cSystem Dynamics modelling with control\u201d, where the control is the command sent to the thruster (on/off) in the column \u201cton\u201d. It is very unlikely in practice to have more than a few complete SN qualification datasets, so we suggest a 50:50 split between the train and test sets.\n    - Use SN01 to SN12 to build your train and validation sets. These are data assumed to be collected on-ground.\n    - Use SN13 to SN24 as the final test set. Warning: given that these thrusters are expected to be mounted on a flying satellite, you cannot retrain the model progressively using SN13 to SN24 data. The data is the ground truth as if we were able to measure it on-board.\n- Acceptance Test for Individualised Performance Model refinement:\n    - In practice, every newly manufactured thruster is tested via acceptance tests: test_id 1 to 12. So these measurement are actually available for each thruster serial number. For this reason, it is possible to use the acceptance test data (test_id 1 to 12) of SN13 to SN24 as input to the model to predict the flight performance of these SN over test_id 13 to 112. Taking into account the acceptance test of individual thruster might be helpful to generate individualized thruster predictive model. This use case propose to investigate the differences between a one-model-for-all approach or a one-model-for-one-thruster approach.\n\n- Uncertainty Quantification:\n    - Thruster-to-thruster reproducibility verification, i.e. to evaluate the prediction variability between several thrusters in order to construct uncertainty bounds around the prediction (predictive intervals) of the thrust and mass flow rate of future thrusters that may be used during an actual space mission. Use SN01 to SN12 for training and validation, and SN13 to SN24 for test set. The train/val set fraction is lower than in conventional ML settings to mimic real industrial constraints (only a few thrusters fully tested, most of them are flying). The train set is here to generate prediction interval, and the test set (SN13 to SN24) can be used to verify the expected coverage of the predictive interval. As for the regression use case, it may be of interest to include acceptance test data as input data to predict to build and refine predictive intervals and better estimate the per-thruster uncertainties.\n\n### Anomaly, Novelty, and Outlier Detection\nAnomalies can be detected in an unsupervised setting (outlier detection) or in a semi-supervised setting (novelty detection). The dataset includes a total of 270 anomalies.\n- Outlier is an observation which deviates from other observations (abnormal observation). This is an unsupervised learning approach where no labels are provided but the algorithm tries to find the datapoints which do not conform to the majority of the observations.\n- Novelty is an observation which deviates from known normal observations. This is a semi-supervised learning approach: in this scenario the algorithm learns from known nominal data pattern (that have been labelled), or using inliers of an outliers detection system), and flags new observations that deviate significantly from known nominal patterns.\n- There are many ways this dataset can be used to benchmark anomaly detection systems:\n- **Simple approach**: predict if a firing test sequence, given all columns except \u201cvl\u201d and \u201canomaly code\u201d is anomalous, i.e. the corresponding metadata.csv anomalous flag is *True*. A firing sequence is labelled anomalous in the metadata, even if only a few seconds of the time series is anomalous. This a simple yet more practical approach to implement. Traditional metrics such as precision, recall and f1-score can be used to report the anomaly detection performances.\n- **Advanced approach**: each firing sequence (time series) comes with an \u201canomaly_code\u201d column which takes value \u201c0\u201d if it is nominal, or another value (see anomaly codes description) if \u201canomalous\u201d. It flags for each point in the time series if there is an anomaly or not. It is useful for anomaly detection system that try to predict which portion of a time series is anomalous. Suitable metrics to evaluate the anomaly detection system may be mean intersect over union (IoU) or the Dice Coefficient as the problem is reduced to a segmentation problem where the model is asked to segment the time series into nominal and anomalous portions.\n\n",
  "hasDescription": true,
  "isPrivate": false,
  "keywords": [
    "earth and nature",
    "business",
    "science and technology",
    "computer science",
    "time series analysis",
    "data analytics",
    "outlier analysis",
    "deep learning",
    "regression"
  ],
  "licenses": [
    {
      "nameNullable": "Attribution 4.0 International (CC BY 4.0)",
      "name": "Attribution 4.0 International (CC BY 4.0)",
      "hasName": true
    }
  ],
  "collaborators": [],
  "data": []
}